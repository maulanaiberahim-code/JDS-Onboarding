/// <reference types="cypress" />
/// <reference types="cypress" />
/// <reference types="cypress" />
/// <reference types="cypress" />
/// <reference types="node" />
import { Test } from 'mocha';
export declare const qase: {
    (caseId: number | string | number[] | string[], test: Test): Test;
    /**
     * Set a title for the test case
     * @param {string} value
     * @example
     * it('test', () => {
     *    qase.title("Title");
     *    cy.visit('https://example.com');
     * });
     */
    title(value: string): Cypress.Chainable<JQuery<void>>;
    /**
     * Set fields for the test case
     * @param {Record<string, string>} values
     * @example
     * it('test', () => {
     *    qase.fields({description: "Description"});
     *    cy.visit('https://example.com');
     * });
     */
    fields(values: Record<string, string>): Cypress.Chainable<JQuery<void>>;
    /**
     * Ignore the test case result in Qase
     * @example
     * it('test', () => {
     *    qase.ignore();
     *    cy.visit('https://example.com');
     * });
     */
    ignore(): Cypress.Chainable<JQuery<void>>;
    /**
     * Set parameters for the test case
     * @param {Record<string, string>} values
     * @example
     * it('test', () => {
     *    qase.parameters({param01: "value01"});
     *    cy.visit('https://example.com');
     * });
     */
    parameters(values: Record<string, string>): Cypress.Chainable<JQuery<void>>;
    /**
     * Set group parameters for the test case
     * @param {Record<string, string>} values
     * @example
     * it('test', () => {
     *    qase.groupParameters({param01: "value01"});
     *    cy.visit('https://example.com');
     * });
     */
    groupParameters(values: Record<string, string>): Cypress.Chainable<JQuery<void>>;
    /**
     * Set a suite for the test case
     * @param {string} value
     * @example
     * it('test', () => {
     *    qase.suite("Suite 01");
     *    cy.visit('https://example.com');
     * });
     */
    suite(value: string): Cypress.Chainable<JQuery<void>>;
    /**
     * Set a comment for the test case
     * @param {string} value
     * @example
     * it('test', () => {
     *    qase.comment("Some comment");
     *    cy.visit('https://example.com');
     * });
     */
    comment(value: string): Cypress.Chainable<JQuery<void>>;
    /**
     * Add a step to  the test case
     * @param {string} name
     * @param {() => T | PromiseLike<T>} body
     * @example
     * it('test', () => {
     *    qase.step("Some step", () => {
     *      // some actions
     *    });
     *    cy.visit('https://example.com');
     * });
     */
    step<T = void>(name: string, body: () => T | PromiseLike<T>): Cypress.Chainable<JQuery<void>>;
    /**
     * Attach a file to the test case or the step
     * @param attach
     * @example
     * it('test', () => {
     *   qase.attach({ name: 'attachment.txt', content: 'Hello, world!', contentType: 'text/plain' });
     *   qase.attach({ paths: '/path/to/file'});
     *   qase.attach({ paths: ['/path/to/file', '/path/to/another/file']});
     *   cy.visit('https://example.com');
     *  });
     */
    attach(attach: {
        name?: string;
        paths?: string | string[];
        content?: Buffer | string;
        contentType?: string;
    }): Cypress.Chainable<JQuery<void>>;
};
