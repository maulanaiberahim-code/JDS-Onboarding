"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypressQaseReporter = void 0;
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
const child_process_1 = require("child_process");
const mocha_1 = require("mocha");
const qase_javascript_commons_1 = require("qase-javascript-commons");
const traverse_dir_1 = require("./utils/traverse-dir");
const configSchema_1 = require("./configSchema");
const manager_1 = require("./metadata/manager");
const { EVENT_TEST_FAIL, EVENT_TEST_PASS, EVENT_TEST_PENDING, EVENT_RUN_END, } = mocha_1.Runner.constants;
/**
 * @class CypressQaseReporter
 * @extends reporters.Base
 */
class CypressQaseReporter extends mocha_1.reporters.Base {
    /**
     * @param {string} title
     * @returns {number[]}
     * @private
     */
    static getCaseId(title) {
        const [, ids] = title.match(CypressQaseReporter.qaseIdRegExp) ?? [];
        return ids ? ids.split(',').map((id) => Number(id)) : [];
    }
    /**
     * @param {number[]} ids
     * @param {string} dir
     * @returns {Attachment[]}
     * @private
     */
    static findAttachments(ids, dir) {
        const idSet = new Set(ids);
        const attachments = [];
        try {
            (0, traverse_dir_1.traverseDir)(path_1.default.join(process.cwd(), dir), (filePath) => {
                if (CypressQaseReporter.getCaseId(filePath).some((item) => idSet.has(item))) {
                    attachments.push({
                        content: '',
                        id: (0, uuid_1.v4)(),
                        mime_type: '', size: 0,
                        file_name: path_1.default.basename(filePath),
                        file_path: filePath,
                    });
                }
            });
        }
        catch (error) { /* ignore */
        }
        return attachments;
    }
    /**
     * @param {Runner} runner
     * @param {CypressQaseOptionsType} options
     * @param {ConfigLoaderInterface} configLoader
     */
    constructor(runner, options, configLoader = new qase_javascript_commons_1.ConfigLoader(configSchema_1.configSchema)) {
        super(runner, options);
        const { reporterOptions } = options;
        const config = configLoader.load();
        const { framework, ...composedOptions } = (0, qase_javascript_commons_1.composeOptions)(reporterOptions, config);
        this.screenshotsFolder = framework?.cypress?.screenshotsFolder;
        this.options = composedOptions;
        this.reporter = qase_javascript_commons_1.QaseReporter.getInstance({
            ...composedOptions,
            frameworkPackage: 'cypress',
            frameworkName: 'cypress',
            reporterName: 'cypress-qase-reporter',
        });
        this.addRunnerListeners(runner);
    }
    /**
     * @param {Runner} runner
     * @private
     */
    addRunnerListeners(runner) {
        runner.on(EVENT_TEST_PASS, (test) => this.addTestResult(test));
        runner.on(EVENT_TEST_PENDING, (test) => this.addTestResult(test));
        runner.on(EVENT_TEST_FAIL, (test) => this.addTestResult(test));
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        runner.once(EVENT_RUN_END, () => {
            const results = this.reporter.getResults();
            (0, child_process_1.spawnSync)('node', [`${__dirname}/child.js`], {
                stdio: 'inherit',
                env: Object.assign(process.env, {
                    reporterConfig: JSON.stringify(this.options),
                    results: JSON.stringify(results),
                }),
            });
        });
    }
    /**
     * @param {Test} test
     * @private
     */
    addTestResult(test) {
        const metadata = manager_1.MetadataManager.getMetadata();
        if (metadata?.ignore) {
            manager_1.MetadataManager.clear();
            return;
        }
        const ids = CypressQaseReporter.getCaseId(test.title);
        const attachments = this.screenshotsFolder
            ? CypressQaseReporter.findAttachments(ids, this.screenshotsFolder)
            : undefined;
        attachments?.push(...(metadata?.attachments ?? []));
        let relations = {};
        if (test.parent !== undefined) {
            const data = [];
            for (const suite of test.parent.titlePath()) {
                data.push({
                    title: suite,
                    public_id: null,
                });
            }
            relations = {
                suite: {
                    data: data,
                },
            };
        }
        if (metadata?.suite) {
            relations = {
                suite: {
                    data: [
                        {
                            title: metadata.suite,
                            public_id: null,
                        },
                    ],
                },
            };
        }
        let message = null;
        if (metadata?.comment) {
            message = metadata.comment;
        }
        if (test.err?.message) {
            if (message) {
                message += '\n\n';
            }
            message += test.err.message;
        }
        const result = {
            attachments: attachments ?? [],
            author: null,
            fields: metadata?.fields ?? {},
            message: message,
            muted: false,
            params: metadata?.parameters ?? {},
            group_params: metadata?.groupParams ?? {},
            relations: relations,
            run_id: null,
            signature: this.getSignature(test, ids),
            steps: metadata?.steps ? this.getSteps(metadata.steps, metadata.stepAttachments ?? {}) : [],
            id: (0, uuid_1.v4)(),
            execution: {
                status: test.state
                    ? CypressQaseReporter.statusMap[test.state]
                    : qase_javascript_commons_1.TestStatusEnum.invalid,
                start_time: null,
                end_time: null,
                duration: test.duration ?? 0,
                stacktrace: test.err?.stack ?? null,
                thread: null,
            },
            testops_id: ids.length > 0 ? ids : null,
            title: metadata?.title ?? test.title,
        };
        void this.reporter.addTestResult(result);
        manager_1.MetadataManager.clear();
    }
    /**
     * @param {Test} test
     * @param {number[]} ids
     * @private
     */
    getSignature(test, ids) {
        let signature = '';
        const file = test.parent ? this.getFile(test.parent) : undefined;
        if (file) {
            signature = file.split('/').join('::');
        }
        if (test.parent) {
            for (const suite of test.parent.titlePath()) {
                signature += '::' + suite.toLowerCase().replace(/\s/g, '_');
            }
        }
        signature += '::' + test.title.toLowerCase().replace(/\s/g, '_');
        if (ids.length > 0) {
            signature += '::' + ids.join('::');
        }
        return signature;
    }
    /**
     * @param {Suite} suite
     * @private
     */
    getFile(suite) {
        if (suite.file) {
            return suite.file;
        }
        if (suite.parent) {
            return this.getFile(suite.parent);
        }
        return undefined;
    }
    getSteps(steps, attachments) {
        const result = [];
        const stepMap = new Map();
        for (const step of steps.sort((a, b) => a.timestamp - b.timestamp)) {
            if (!('status' in step)) {
                const newStep = new qase_javascript_commons_1.TestStepType();
                newStep.id = step.id;
                newStep.execution.status = qase_javascript_commons_1.StepStatusEnum.failed;
                newStep.execution.start_time = step.timestamp;
                newStep.execution.end_time = Date.now();
                newStep.data = {
                    action: step.name,
                    expected_result: null,
                };
                if (attachments[step.id]) {
                    newStep.attachments = attachments[step.id] ?? [];
                }
                const parentId = step.parentId;
                if (parentId) {
                    newStep.parent_id = parentId;
                    const parent = stepMap.get(parentId);
                    if (parent) {
                        parent.steps.push(newStep);
                    }
                }
                else {
                    result.push(newStep);
                }
                stepMap.set(step.id, newStep);
            }
            else {
                const stepType = stepMap.get(step.id);
                if (stepType) {
                    stepType.execution.status = step.status;
                    stepType.execution.end_time = step.timestamp;
                }
            }
        }
        return result;
    }
}
exports.CypressQaseReporter = CypressQaseReporter;
/**
 * @type {RegExp}
 */
CypressQaseReporter.qaseIdRegExp = /\(Qase ID:? ([\d,]+)\)/;
/**
 * @type {Record<CypressState, TestStatusEnum>}
 */
CypressQaseReporter.statusMap = {
    failed: qase_javascript_commons_1.TestStatusEnum.failed,
    passed: qase_javascript_commons_1.TestStatusEnum.passed,
    pending: qase_javascript_commons_1.TestStatusEnum.skipped,
};
