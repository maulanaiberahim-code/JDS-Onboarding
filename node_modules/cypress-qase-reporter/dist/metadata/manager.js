"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataManager = void 0;
const fs_1 = require("fs");
const uuid_1 = require("uuid");
const path_1 = __importDefault(require("path"));
const qase_javascript_commons_1 = require("qase-javascript-commons");
const metadataPath = 'qaseMetadata';
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
class MetadataManager {
    static getMetadata() {
        if (!this.isExists()) {
            return undefined;
        }
        let metadata = {
            title: undefined,
            fields: {},
            parameters: {},
            groupParams: {},
            ignore: false,
            suite: undefined,
            comment: undefined,
            steps: [],
            currentStepId: undefined,
            firstStepName: undefined,
            attachments: [],
            stepAttachments: {},
        };
        try {
            const data = (0, fs_1.readFileSync)(metadataPath, 'utf8');
            metadata = JSON.parse(data);
            return metadata;
        }
        catch (err) {
            console.error('Error reading metadata file:', err);
        }
        return undefined;
    }
    static setIgnore() {
        const metadata = this.getMetadata() ?? {};
        metadata.ignore = true;
        this.setMetadata(metadata);
    }
    static addStepStart(name) {
        const metadata = this.getMetadata() ?? {};
        if (metadata.firstStepName === name) {
            return;
        }
        if (!metadata.steps) {
            metadata.steps = [];
        }
        const id = (0, uuid_1.v4)();
        const parentId = metadata.currentStepId ?? undefined;
        metadata.steps.push({ timestamp: Date.now(), name, id: id, parentId: parentId });
        metadata.currentStepId = id;
        if (!metadata.firstStepName) {
            metadata.firstStepName = name;
        }
        this.setMetadata(metadata);
    }
    static addStepEnd(status) {
        const metadata = this.getMetadata() ?? {};
        if (!metadata.steps || !metadata.currentStepId) {
            return;
        }
        const parentId = metadata.steps.reverse().find((step) => step.id === metadata.currentStepId)?.parentId;
        metadata.steps.push({ timestamp: Date.now(), status, id: metadata.currentStepId });
        metadata.currentStepId = parentId;
        this.setMetadata(metadata);
    }
    static addAttach(attach) {
        const metadata = this.getMetadata() ?? {};
        if (!metadata.attachments) {
            metadata.attachments = [];
        }
        if (!metadata.stepAttachments) {
            metadata.stepAttachments = {};
        }
        const attachments = this.prepareAttach(attach);
        if (metadata.currentStepId) {
            if (metadata.stepAttachments[metadata.currentStepId] === undefined) {
                metadata.stepAttachments[metadata.currentStepId] = attachments;
            }
            else {
                metadata.stepAttachments[metadata.currentStepId]?.push(...attachments);
            }
        }
        else {
            metadata.attachments.push(...attachments);
        }
        this.setMetadata(metadata);
    }
    static setSuite(suite) {
        const metadata = this.getMetadata() ?? {};
        metadata.suite = suite;
        this.setMetadata(metadata);
    }
    static setComment(comment) {
        const metadata = this.getMetadata() ?? {};
        metadata.comment = comment;
        this.setMetadata(metadata);
    }
    static setTitle(title) {
        const metadata = this.getMetadata() ?? {};
        metadata.title = title;
        this.setMetadata(metadata);
    }
    static setFields(fields) {
        const metadata = this.getMetadata() ?? {};
        metadata.fields = fields;
        this.setMetadata(metadata);
    }
    static setParameters(parameters) {
        const metadata = this.getMetadata() ?? {};
        metadata.parameters = parameters;
        this.setMetadata(metadata);
    }
    static setGroupParams(groupParams) {
        const metadata = this.getMetadata() ?? {};
        metadata.groupParams = groupParams;
        this.setMetadata(metadata);
    }
    static setMetadata(metadata) {
        try {
            const data = JSON.stringify(metadata);
            (0, fs_1.writeFileSync)(metadataPath, data);
        }
        catch (err) {
            console.error('Error writing metadata file:', err);
        }
    }
    static clear() {
        if (!this.isExists()) {
            return;
        }
        try {
            (0, fs_1.unlinkSync)(metadataPath);
        }
        catch (err) {
            console.error('Error clearing state file:', err);
        }
    }
    static isExists() {
        return (0, fs_1.existsSync)(metadataPath);
    }
    static prepareAttach(attach) {
        const attachments = [];
        if (attach.paths) {
            if (Array.isArray(attach.paths)) {
                attach.paths.forEach((file) => {
                    const attachmentName = path_1.default.basename(file);
                    const contentType = (0, qase_javascript_commons_1.getMimeTypes)(file);
                    attachments.push({
                        file_name: attachmentName,
                        mime_type: contentType,
                        file_path: file,
                        content: '',
                        size: 0,
                        id: (0, uuid_1.v4)(),
                    });
                });
            }
            else {
                const attachmentName = path_1.default.basename(attach.paths);
                const contentType = (0, qase_javascript_commons_1.getMimeTypes)(attach.paths);
                attachments.push({
                    file_name: attachmentName,
                    mime_type: contentType,
                    file_path: attach.paths,
                    content: '',
                    size: 0,
                    id: (0, uuid_1.v4)(),
                });
            }
        }
        else if (attach.content) {
            attachments.push({
                file_name: attach.name ?? 'attachment',
                mime_type: attach.contentType ?? 'application/octet-stream',
                file_path: null,
                content: attach.content,
                size: 0,
                id: (0, uuid_1.v4)(),
            });
        }
        return attachments;
    }
}
exports.MetadataManager = MetadataManager;
