"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QaseApi = void 0;
const axios_1 = require("axios");
const axiosRetry = require("axios-retry");
const generated_1 = require("./generated");
/**
 * @class QaseApi
 * @implements QaseApiInterface
 */
class QaseApi {
    /**
     * @param {QaseApiOptionsType} options
     * @param {{new(): unknown}} formDataCtor
     */
    constructor(options, formDataCtor) {
        const { token, host, headers, retries = 3, retryDelay = 0, } = options;
        const transport = axios_1.default.create({
            headers,
            maxBodyLength: Infinity,
            maxContentLength: Infinity,
        });
        axiosRetry(transport, {
            retries,
            retryDelay: () => retryDelay,
            // eslint-disable-next-line @typescript-eslint/unbound-method
            retryCondition: axiosRetry.isIdempotentRequestError,
        });
        const configuration = new generated_1.Configuration({
            apiKey: token,
            formDataCtor,
        });
        // default path is https://api.qase.io, defined in
        // qaseio/src/generated/base.ts
        if (host != undefined) {
            if (host == 'qase.io' || host == 'api.qase.io' || host == 'https://api.qase.io') {
                configuration.basePath = `https://api.qase.io`;
            }
            else if (host == 'http://api.qase.lo') {
                // Qase on local machine, development mode
                configuration.basePath = host;
            }
            else {
                // Custom Qase host
                configuration.basePath = `https://${host}`;
            }
        }
        this.projects = new generated_1.ProjectsApi(configuration, host, transport);
        this.cases = new generated_1.CasesApi(configuration, host, transport);
        this.result = new generated_1.ResultApi(configuration, host, transport);
        this.results = new generated_1.ResultsApi(configuration, host, transport);
        this.runs = new generated_1.RunsApi(configuration, host, transport);
        this.attachments = new generated_1.AttachmentsApi(configuration, host, transport);
        this.plans = new generated_1.PlansApi(configuration, host, transport);
        this.suites = new generated_1.SuitesApi(configuration, host, transport);
        this.milestones = new generated_1.MilestonesApi(configuration, host, transport);
        this.sharedSteps = new generated_1.SharedStepsApi(configuration, host, transport);
        this.defects = new generated_1.DefectsApi(configuration, host, transport);
        this.customFields = new generated_1.CustomFieldsApi(configuration, host, transport);
        this.authors = new generated_1.AuthorsApi(configuration, host, transport);
        this.environment = new generated_1.EnvironmentsApi(configuration, host, transport);
    }
}
exports.QaseApi = QaseApi;
