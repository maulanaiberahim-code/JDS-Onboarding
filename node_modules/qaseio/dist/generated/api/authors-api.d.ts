/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AuthorListResponse } from '../model';
import { AuthorResponse } from '../model';
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export declare const AuthorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method allows to retrieve a specific author.
     * @summary Get a specific author
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthor: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all authors in selected project.
     * @summary Get all authors
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {'app' | 'user'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthors: (search?: string, type?: 'app' | 'user', limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthorsApi - functional programming interface
 * @export
 */
export declare const AuthorsApiFp: (configuration?: Configuration) => {
    /**
     * This method allows to retrieve a specific author.
     * @summary Get a specific author
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthor(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorResponse>>;
    /**
     * This method allows to retrieve all authors in selected project.
     * @summary Get all authors
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {'app' | 'user'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthors(search?: string, type?: 'app' | 'user', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorListResponse>>;
};
/**
 * AuthorsApi - factory interface
 * @export
 */
export declare const AuthorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method allows to retrieve a specific author.
     * @summary Get a specific author
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthor(id: number, options?: any): AxiosPromise<AuthorResponse>;
    /**
     * This method allows to retrieve all authors in selected project.
     * @summary Get all authors
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {'app' | 'user'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthors(search?: string, type?: 'app' | 'user', limit?: number, offset?: number, options?: any): AxiosPromise<AuthorListResponse>;
};
/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
export declare class AuthorsApi extends BaseAPI {
    /**
     * This method allows to retrieve a specific author.
     * @summary Get a specific author
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthor(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorResponse, any>>;
    /**
     * This method allows to retrieve all authors in selected project.
     * @summary Get all authors
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {'app' | 'user'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthors(search?: string, type?: 'app' | 'user', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorListResponse, any>>;
}
