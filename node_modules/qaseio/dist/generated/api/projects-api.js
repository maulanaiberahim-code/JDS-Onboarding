"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectsApi = exports.ProjectsApiFactory = exports.ProjectsApiFp = exports.ProjectsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
const ProjectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method is used to create a new project through API.
         * @summary Create new project
         * @param {ProjectCreate} projectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: (projectCreate_1, ...args_1) => __awaiter(this, [projectCreate_1, ...args_1], void 0, function* (projectCreate, options = {}) {
            // verify required parameter 'projectCreate' is not null or undefined
            (0, common_1.assertParamExists)('createProject', 'projectCreate', projectCreate);
            const localVarPath = `/v1/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(projectCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to delete a specific project.
         * @summary Delete Project by code
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: (code_1, ...args_2) => __awaiter(this, [code_1, ...args_2], void 0, function* (code, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('deleteProject', 'code', code);
            const localVarPath = `/v1/project/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve a specific project.
         * @summary Get Project by code
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: (code_2, ...args_3) => __awaiter(this, [code_2, ...args_3], void 0, function* (code, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getProject', 'code', code);
            const localVarPath = `/v1/project/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
         * @summary Get All Projects
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: (limit_1, offset_1, ...args_4) => __awaiter(this, [limit_1, offset_1, ...args_4], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/v1/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to grant access to a specific project.
         * @summary Grant access to project by code
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToProject: (code_3, projectAccess_1, ...args_5) => __awaiter(this, [code_3, projectAccess_1, ...args_5], void 0, function* (code, projectAccess, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('grantAccessToProject', 'code', code);
            // verify required parameter 'projectAccess' is not null or undefined
            (0, common_1.assertParamExists)('grantAccessToProject', 'projectAccess', projectAccess);
            const localVarPath = `/v1/project/{code}/access`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(projectAccess, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to revoke access to a specific project.
         * @summary Revoke access to project by code
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToProject: (code_4, projectAccess_2, ...args_6) => __awaiter(this, [code_4, projectAccess_2, ...args_6], void 0, function* (code, projectAccess, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('revokeAccessToProject', 'code', code);
            // verify required parameter 'projectAccess' is not null or undefined
            (0, common_1.assertParamExists)('revokeAccessToProject', 'projectAccess', projectAccess);
            const localVarPath = `/v1/project/{code}/access`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(projectAccess, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProjectsApiAxiosParamCreator = ProjectsApiAxiosParamCreator;
/**
 * ProjectsApi - functional programming interface
 * @export
 */
const ProjectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProjectsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method is used to create a new project through API.
         * @summary Create new project
         * @param {ProjectCreate} projectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(projectCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProject(projectCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to delete a specific project.
         * @summary Delete Project by code
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProject(code, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve a specific project.
         * @summary Get Project by code
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProject(code, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
         * @summary Get All Projects
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjects(limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to grant access to a specific project.
         * @summary Grant access to project by code
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToProject(code, projectAccess, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.grantAccessToProject(code, projectAccess, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to revoke access to a specific project.
         * @summary Revoke access to project by code
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToProject(code, projectAccess, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.revokeAccessToProject(code, projectAccess, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProjectsApiFp = ProjectsApiFp;
/**
 * ProjectsApi - factory interface
 * @export
 */
const ProjectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProjectsApiFp)(configuration);
    return {
        /**
         * This method is used to create a new project through API.
         * @summary Create new project
         * @param {ProjectCreate} projectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(projectCreate, options) {
            return localVarFp.createProject(projectCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to delete a specific project.
         * @summary Delete Project by code
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(code, options) {
            return localVarFp.deleteProject(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific project.
         * @summary Get Project by code
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(code, options) {
            return localVarFp.getProject(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
         * @summary Get All Projects
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(limit, offset, options) {
            return localVarFp.getProjects(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to grant access to a specific project.
         * @summary Grant access to project by code
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccessToProject(code, projectAccess, options) {
            return localVarFp.grantAccessToProject(code, projectAccess, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to revoke access to a specific project.
         * @summary Revoke access to project by code
         * @param {string} code Code of project, where to search entities.
         * @param {ProjectAccess} projectAccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToProject(code, projectAccess, options) {
            return localVarFp.revokeAccessToProject(code, projectAccess, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProjectsApiFactory = ProjectsApiFactory;
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
class ProjectsApi extends base_1.BaseAPI {
    /**
     * This method is used to create a new project through API.
     * @summary Create new project
     * @param {ProjectCreate} projectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProject(projectCreate, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).createProject(projectCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to delete a specific project.
     * @summary Delete Project by code
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(code, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).deleteProject(code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve a specific project.
     * @summary Get Project by code
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(code, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProject(code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all projects available for your account. You can limit and offset params to paginate.
     * @summary Get All Projects
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjects(limit, offset, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).getProjects(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to grant access to a specific project.
     * @summary Grant access to project by code
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    grantAccessToProject(code, projectAccess, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).grantAccessToProject(code, projectAccess, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to revoke access to a specific project.
     * @summary Revoke access to project by code
     * @param {string} code Code of project, where to search entities.
     * @param {ProjectAccess} projectAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    revokeAccessToProject(code, projectAccess, options) {
        return (0, exports.ProjectsApiFp)(this.configuration).revokeAccessToProject(code, projectAccess, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectsApi = ProjectsApi;
