"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuitesApi = exports.SuitesApiFactory = exports.SuitesApiFp = exports.SuitesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SuitesApi - axios parameter creator
 * @export
 */
const SuitesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method is used to create a new test suite through API.
         * @summary Create a new test suite
         * @param {string} code Code of project, where to search entities.
         * @param {SuiteCreate} suiteCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSuite: (code_1, suiteCreate_1, ...args_1) => __awaiter(this, [code_1, suiteCreate_1, ...args_1], void 0, function* (code, suiteCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createSuite', 'code', code);
            // verify required parameter 'suiteCreate' is not null or undefined
            (0, common_1.assertParamExists)('createSuite', 'suiteCreate', suiteCreate);
            const localVarPath = `/v1/suite/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(suiteCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method completely deletes a test suite with test cases from repository.
         * @summary Delete test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {SuiteDelete} [suiteDelete]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSuite: (code_2, id_1, suiteDelete_1, ...args_2) => __awaiter(this, [code_2, id_1, suiteDelete_1, ...args_2], void 0, function* (code, id, suiteDelete, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('deleteSuite', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteSuite', 'id', id);
            const localVarPath = `/v1/suite/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(suiteDelete, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve a specific test suite.
         * @summary Get a specific test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuite: (code_3, id_2, ...args_3) => __awaiter(this, [code_3, id_2, ...args_3], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getSuite', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getSuite', 'id', id);
            const localVarPath = `/v1/suite/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all test suites stored in selected project.
         * @summary Get all test suites
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuites: (code_4, search_1, limit_1, offset_1, ...args_4) => __awaiter(this, [code_4, search_1, limit_1, offset_1, ...args_4], void 0, function* (code, search, limit, offset, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getSuites', 'code', code);
            const localVarPath = `/v1/suite/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method is used to update a test suite through API.
         * @summary Update test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {SuiteUpdate} suiteUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuite: (code_5, id_3, suiteUpdate_1, ...args_5) => __awaiter(this, [code_5, id_3, suiteUpdate_1, ...args_5], void 0, function* (code, id, suiteUpdate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('updateSuite', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateSuite', 'id', id);
            // verify required parameter 'suiteUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateSuite', 'suiteUpdate', suiteUpdate);
            const localVarPath = `/v1/suite/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(suiteUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SuitesApiAxiosParamCreator = SuitesApiAxiosParamCreator;
/**
 * SuitesApi - functional programming interface
 * @export
 */
const SuitesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SuitesApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method is used to create a new test suite through API.
         * @summary Create a new test suite
         * @param {string} code Code of project, where to search entities.
         * @param {SuiteCreate} suiteCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSuite(code, suiteCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSuite(code, suiteCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method completely deletes a test suite with test cases from repository.
         * @summary Delete test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {SuiteDelete} [suiteDelete]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSuite(code, id, suiteDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteSuite(code, id, suiteDelete, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve a specific test suite.
         * @summary Get a specific test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuite(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSuite(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all test suites stored in selected project.
         * @summary Get all test suites
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuites(code, search, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSuites(code, search, limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method is used to update a test suite through API.
         * @summary Update test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {SuiteUpdate} suiteUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuite(code, id, suiteUpdate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateSuite(code, id, suiteUpdate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.SuitesApiFp = SuitesApiFp;
/**
 * SuitesApi - factory interface
 * @export
 */
const SuitesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SuitesApiFp)(configuration);
    return {
        /**
         * This method is used to create a new test suite through API.
         * @summary Create a new test suite
         * @param {string} code Code of project, where to search entities.
         * @param {SuiteCreate} suiteCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSuite(code, suiteCreate, options) {
            return localVarFp.createSuite(code, suiteCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a test suite with test cases from repository.
         * @summary Delete test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {SuiteDelete} [suiteDelete]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSuite(code, id, suiteDelete, options) {
            return localVarFp.deleteSuite(code, id, suiteDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific test suite.
         * @summary Get a specific test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuite(code, id, options) {
            return localVarFp.getSuite(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all test suites stored in selected project.
         * @summary Get all test suites
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuites(code, search, limit, offset, options) {
            return localVarFp.getSuites(code, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method is used to update a test suite through API.
         * @summary Update test suite
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {SuiteUpdate} suiteUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSuite(code, id, suiteUpdate, options) {
            return localVarFp.updateSuite(code, id, suiteUpdate, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SuitesApiFactory = SuitesApiFactory;
/**
 * SuitesApi - object-oriented interface
 * @export
 * @class SuitesApi
 * @extends {BaseAPI}
 */
class SuitesApi extends base_1.BaseAPI {
    /**
     * This method is used to create a new test suite through API.
     * @summary Create a new test suite
     * @param {string} code Code of project, where to search entities.
     * @param {SuiteCreate} suiteCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    createSuite(code, suiteCreate, options) {
        return (0, exports.SuitesApiFp)(this.configuration).createSuite(code, suiteCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method completely deletes a test suite with test cases from repository.
     * @summary Delete test suite
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteDelete} [suiteDelete]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    deleteSuite(code, id, suiteDelete, options) {
        return (0, exports.SuitesApiFp)(this.configuration).deleteSuite(code, id, suiteDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve a specific test suite.
     * @summary Get a specific test suite
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    getSuite(code, id, options) {
        return (0, exports.SuitesApiFp)(this.configuration).getSuite(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all test suites stored in selected project.
     * @summary Get all test suites
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    getSuites(code, search, limit, offset, options) {
        return (0, exports.SuitesApiFp)(this.configuration).getSuites(code, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method is used to update a test suite through API.
     * @summary Update test suite
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {SuiteUpdate} suiteUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitesApi
     */
    updateSuite(code, id, suiteUpdate, options) {
        return (0, exports.SuitesApiFp)(this.configuration).updateSuite(code, id, suiteUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SuitesApi = SuitesApi;
