"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunsApi = exports.RunsApiFactory = exports.RunsApiFp = exports.RunsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * RunsApi - axios parameter creator
 * @export
 */
const RunsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to complete a specific run.
         * @summary Complete a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeRun: (code_1, id_1, ...args_1) => __awaiter(this, [code_1, id_1, ...args_1], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('completeRun', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('completeRun', 'id', id);
            const localVarPath = `/v1/run/{code}/{id}/complete`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to create a run in selected project.
         * @summary Create a new run
         * @param {string} code Code of project, where to search entities.
         * @param {RunCreate} runCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun: (code_2, runCreate_1, ...args_2) => __awaiter(this, [code_2, runCreate_1, ...args_2], void 0, function* (code, runCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createRun', 'code', code);
            // verify required parameter 'runCreate' is not null or undefined
            (0, common_1.assertParamExists)('createRun', 'runCreate', runCreate);
            const localVarPath = `/v1/run/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(runCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method completely deletes a run from repository.
         * @summary Delete run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRun: (code_3, id_2, ...args_3) => __awaiter(this, [code_3, id_2, ...args_3], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('deleteRun', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteRun', 'id', id);
            const localVarPath = `/v1/run/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve a specific run.
         * @summary Get a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRun: (code_4, id_3, include_1, ...args_4) => __awaiter(this, [code_4, id_3, include_1, ...args_4], void 0, function* (code, id, include, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getRun', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getRun', 'id', id);
            const localVarPath = `/v1/run/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all runs stored in selected project.
         * @summary Get all runs
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search]
         * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
         * @param {number} [milestone]
         * @param {number} [environment]
         * @param {number} [fromStartTime]
         * @param {number} [toStartTime]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuns: (code_5, search_1, status_1, milestone_1, environment_1, fromStartTime_1, toStartTime_1, limit_1, offset_1, include_2, ...args_5) => __awaiter(this, [code_5, search_1, status_1, milestone_1, environment_1, fromStartTime_1, toStartTime_1, limit_1, offset_1, include_2, ...args_5], void 0, function* (code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getRuns', 'code', code);
            const localVarPath = `/v1/run/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (milestone !== undefined) {
                localVarQueryParameter['milestone'] = milestone;
            }
            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }
            if (fromStartTime !== undefined) {
                localVarQueryParameter['from_start_time'] = fromStartTime;
            }
            if (toStartTime !== undefined) {
                localVarQueryParameter['to_start_time'] = toStartTime;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to update a publicity of specific run.
         * @summary Update publicity of a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {RunPublic} runPublic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunPublicity: (code_6, id_4, runPublic_1, ...args_6) => __awaiter(this, [code_6, id_4, runPublic_1, ...args_6], void 0, function* (code, id, runPublic, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('updateRunPublicity', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateRunPublicity', 'id', id);
            // verify required parameter 'runPublic' is not null or undefined
            (0, common_1.assertParamExists)('updateRunPublicity', 'runPublic', runPublic);
            const localVarPath = `/v1/run/{code}/{id}/public`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(runPublic, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RunsApiAxiosParamCreator = RunsApiAxiosParamCreator;
/**
 * RunsApi - functional programming interface
 * @export
 */
const RunsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RunsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to complete a specific run.
         * @summary Complete a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeRun(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.completeRun(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to create a run in selected project.
         * @summary Create a new run
         * @param {string} code Code of project, where to search entities.
         * @param {RunCreate} runCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun(code, runCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRun(code, runCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method completely deletes a run from repository.
         * @summary Delete run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRun(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRun(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve a specific run.
         * @summary Get a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRun(code, id, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRun(code, id, include, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all runs stored in selected project.
         * @summary Get all runs
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search]
         * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
         * @param {number} [milestone]
         * @param {number} [environment]
         * @param {number} [fromStartTime]
         * @param {number} [toStartTime]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuns(code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRuns(code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to update a publicity of specific run.
         * @summary Update publicity of a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {RunPublic} runPublic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunPublicity(code, id, runPublic, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateRunPublicity(code, id, runPublic, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RunsApiFp = RunsApiFp;
/**
 * RunsApi - factory interface
 * @export
 */
const RunsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RunsApiFp)(configuration);
    return {
        /**
         * This method allows to complete a specific run.
         * @summary Complete a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeRun(code, id, options) {
            return localVarFp.completeRun(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to create a run in selected project.
         * @summary Create a new run
         * @param {string} code Code of project, where to search entities.
         * @param {RunCreate} runCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRun(code, runCreate, options) {
            return localVarFp.createRun(code, runCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a run from repository.
         * @summary Delete run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRun(code, id, options) {
            return localVarFp.deleteRun(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific run.
         * @summary Get a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRun(code, id, include, options) {
            return localVarFp.getRun(code, id, include, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all runs stored in selected project.
         * @summary Get all runs
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search]
         * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
         * @param {number} [milestone]
         * @param {number} [environment]
         * @param {number} [fromStartTime]
         * @param {number} [toStartTime]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuns(code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, options) {
            return localVarFp.getRuns(code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to update a publicity of specific run.
         * @summary Update publicity of a specific run
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {RunPublic} runPublic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunPublicity(code, id, runPublic, options) {
            return localVarFp.updateRunPublicity(code, id, runPublic, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RunsApiFactory = RunsApiFactory;
/**
 * RunsApi - object-oriented interface
 * @export
 * @class RunsApi
 * @extends {BaseAPI}
 */
class RunsApi extends base_1.BaseAPI {
    /**
     * This method allows to complete a specific run.
     * @summary Complete a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    completeRun(code, id, options) {
        return (0, exports.RunsApiFp)(this.configuration).completeRun(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to create a run in selected project.
     * @summary Create a new run
     * @param {string} code Code of project, where to search entities.
     * @param {RunCreate} runCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    createRun(code, runCreate, options) {
        return (0, exports.RunsApiFp)(this.configuration).createRun(code, runCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method completely deletes a run from repository.
     * @summary Delete run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    deleteRun(code, id, options) {
        return (0, exports.RunsApiFp)(this.configuration).deleteRun(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve a specific run.
     * @summary Get a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    getRun(code, id, include, options) {
        return (0, exports.RunsApiFp)(this.configuration).getRun(code, id, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all runs stored in selected project.
     * @summary Get all runs
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search]
     * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
     * @param {number} [milestone]
     * @param {number} [environment]
     * @param {number} [fromStartTime]
     * @param {number} [toStartTime]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    getRuns(code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, options) {
        return (0, exports.RunsApiFp)(this.configuration).getRuns(code, search, status, milestone, environment, fromStartTime, toStartTime, limit, offset, include, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to update a publicity of specific run.
     * @summary Update publicity of a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {RunPublic} runPublic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    updateRunPublicity(code, id, runPublic, options) {
        return (0, exports.RunsApiFp)(this.configuration).updateRunPublicity(code, id, runPublic, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RunsApi = RunsApi;
