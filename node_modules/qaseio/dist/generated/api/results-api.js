"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultsApi = exports.ResultsApiFactory = exports.ResultsApiFp = exports.ResultsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ResultsApi - axios parameter creator
 * @export
 */
const ResultsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to create test run result by Run Id.
         * @summary Create test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {ResultCreate} resultCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResult: (code_1, id_1, resultCreate_1, ...args_1) => __awaiter(this, [code_1, id_1, resultCreate_1, ...args_1], void 0, function* (code, id, resultCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createResult', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('createResult', 'id', id);
            // verify required parameter 'resultCreate' is not null or undefined
            (0, common_1.assertParamExists)('createResult', 'resultCreate', resultCreate);
            const localVarPath = `/v1/result/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resultCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to create a lot of test run result at once.  If you try to send more than 2,000 results in a single bulk request, you will receive an error with code 413 - Payload Too Large.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary Bulk create test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {ResultcreateBulk} resultcreateBulk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultBulk: (code_2, id_2, resultcreateBulk_1, ...args_2) => __awaiter(this, [code_2, id_2, resultcreateBulk_1, ...args_2], void 0, function* (code, id, resultcreateBulk, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createResultBulk', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('createResultBulk', 'id', id);
            // verify required parameter 'resultcreateBulk' is not null or undefined
            (0, common_1.assertParamExists)('createResultBulk', 'resultcreateBulk', resultcreateBulk);
            const localVarPath = `/v1/result/{code}/{id}/bulk`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resultcreateBulk, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to delete test run result.
         * @summary Delete test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResult: (code_3, id_3, hash_1, ...args_3) => __awaiter(this, [code_3, id_3, hash_1, ...args_3], void 0, function* (code, id, hash, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('deleteResult', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteResult', 'id', id);
            // verify required parameter 'hash' is not null or undefined
            (0, common_1.assertParamExists)('deleteResult', 'hash', hash);
            const localVarPath = `/v1/result/{code}/{id}/{hash}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve a specific test run result by Hash.
         * @summary Get test run result by code
         * @param {string} code Code of project, where to search entities.
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResult: (code_4, hash_2, ...args_4) => __awaiter(this, [code_4, hash_2, ...args_4], void 0, function* (code, hash, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getResult', 'code', code);
            // verify required parameter 'hash' is not null or undefined
            (0, common_1.assertParamExists)('getResult', 'hash', hash);
            const localVarPath = `/v1/result/{code}/{hash}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all test run results stored in selected project.
         * @summary Get all test run results
         * @param {string} code Code of project, where to search entities.
         * @param {string} [status] A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid.
         * @param {string} [run] A list of run IDs separated by comma.
         * @param {string} [caseId] A list of case IDs separated by comma.
         * @param {string} [member] A list of member IDs separated by comma.
         * @param {boolean} [api]
         * @param {string} [fromEndTime] Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
         * @param {string} [toEndTime] Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResults: (code_5, status_1, run_1, caseId_1, member_1, api_1, fromEndTime_1, toEndTime_1, limit_1, offset_1, ...args_5) => __awaiter(this, [code_5, status_1, run_1, caseId_1, member_1, api_1, fromEndTime_1, toEndTime_1, limit_1, offset_1, ...args_5], void 0, function* (code, status, run, caseId, member, api, fromEndTime, toEndTime, limit, offset, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getResults', 'code', code);
            const localVarPath = `/v1/result/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (run !== undefined) {
                localVarQueryParameter['run'] = run;
            }
            if (caseId !== undefined) {
                localVarQueryParameter['case_id'] = caseId;
            }
            if (member !== undefined) {
                localVarQueryParameter['member'] = member;
            }
            if (api !== undefined) {
                localVarQueryParameter['api'] = api;
            }
            if (fromEndTime !== undefined) {
                localVarQueryParameter['from_end_time'] = fromEndTime;
            }
            if (toEndTime !== undefined) {
                localVarQueryParameter['to_end_time'] = toEndTime;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to update test run result.
         * @summary Update test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} hash Hash.
         * @param {ResultUpdate} resultUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResult: (code_6, id_4, hash_3, resultUpdate_1, ...args_6) => __awaiter(this, [code_6, id_4, hash_3, resultUpdate_1, ...args_6], void 0, function* (code, id, hash, resultUpdate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('updateResult', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateResult', 'id', id);
            // verify required parameter 'hash' is not null or undefined
            (0, common_1.assertParamExists)('updateResult', 'hash', hash);
            // verify required parameter 'resultUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateResult', 'resultUpdate', resultUpdate);
            const localVarPath = `/v1/result/{code}/{id}/{hash}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resultUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ResultsApiAxiosParamCreator = ResultsApiAxiosParamCreator;
/**
 * ResultsApi - functional programming interface
 * @export
 */
const ResultsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ResultsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to create test run result by Run Id.
         * @summary Create test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {ResultCreate} resultCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResult(code, id, resultCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createResult(code, id, resultCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to create a lot of test run result at once.  If you try to send more than 2,000 results in a single bulk request, you will receive an error with code 413 - Payload Too Large.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary Bulk create test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {ResultcreateBulk} resultcreateBulk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultBulk(code, id, resultcreateBulk, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createResultBulk(code, id, resultcreateBulk, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to delete test run result.
         * @summary Delete test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResult(code, id, hash, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteResult(code, id, hash, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve a specific test run result by Hash.
         * @summary Get test run result by code
         * @param {string} code Code of project, where to search entities.
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResult(code, hash, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getResult(code, hash, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all test run results stored in selected project.
         * @summary Get all test run results
         * @param {string} code Code of project, where to search entities.
         * @param {string} [status] A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid.
         * @param {string} [run] A list of run IDs separated by comma.
         * @param {string} [caseId] A list of case IDs separated by comma.
         * @param {string} [member] A list of member IDs separated by comma.
         * @param {boolean} [api]
         * @param {string} [fromEndTime] Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
         * @param {string} [toEndTime] Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResults(code, status, run, caseId, member, api, fromEndTime, toEndTime, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getResults(code, status, run, caseId, member, api, fromEndTime, toEndTime, limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to update test run result.
         * @summary Update test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} hash Hash.
         * @param {ResultUpdate} resultUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResult(code, id, hash, resultUpdate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateResult(code, id, hash, resultUpdate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ResultsApiFp = ResultsApiFp;
/**
 * ResultsApi - factory interface
 * @export
 */
const ResultsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ResultsApiFp)(configuration);
    return {
        /**
         * This method allows to create test run result by Run Id.
         * @summary Create test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {ResultCreate} resultCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResult(code, id, resultCreate, options) {
            return localVarFp.createResult(code, id, resultCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to create a lot of test run result at once.  If you try to send more than 2,000 results in a single bulk request, you will receive an error with code 413 - Payload Too Large.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary Bulk create test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {ResultcreateBulk} resultcreateBulk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultBulk(code, id, resultcreateBulk, options) {
            return localVarFp.createResultBulk(code, id, resultcreateBulk, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to delete test run result.
         * @summary Delete test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResult(code, id, hash, options) {
            return localVarFp.deleteResult(code, id, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific test run result by Hash.
         * @summary Get test run result by code
         * @param {string} code Code of project, where to search entities.
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResult(code, hash, options) {
            return localVarFp.getResult(code, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all test run results stored in selected project.
         * @summary Get all test run results
         * @param {string} code Code of project, where to search entities.
         * @param {string} [status] A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid.
         * @param {string} [run] A list of run IDs separated by comma.
         * @param {string} [caseId] A list of case IDs separated by comma.
         * @param {string} [member] A list of member IDs separated by comma.
         * @param {boolean} [api]
         * @param {string} [fromEndTime] Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
         * @param {string} [toEndTime] Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResults(code, status, run, caseId, member, api, fromEndTime, toEndTime, limit, offset, options) {
            return localVarFp.getResults(code, status, run, caseId, member, api, fromEndTime, toEndTime, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to update test run result.
         * @summary Update test run result
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {string} hash Hash.
         * @param {ResultUpdate} resultUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResult(code, id, hash, resultUpdate, options) {
            return localVarFp.updateResult(code, id, hash, resultUpdate, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ResultsApiFactory = ResultsApiFactory;
/**
 * ResultsApi - object-oriented interface
 * @export
 * @class ResultsApi
 * @extends {BaseAPI}
 */
class ResultsApi extends base_1.BaseAPI {
    /**
     * This method allows to create test run result by Run Id.
     * @summary Create test run result
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultCreate} resultCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    createResult(code, id, resultCreate, options) {
        return (0, exports.ResultsApiFp)(this.configuration).createResult(code, id, resultCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to create a lot of test run result at once.  If you try to send more than 2,000 results in a single bulk request, you will receive an error with code 413 - Payload Too Large.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
     * @summary Bulk create test run result
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {ResultcreateBulk} resultcreateBulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    createResultBulk(code, id, resultcreateBulk, options) {
        return (0, exports.ResultsApiFp)(this.configuration).createResultBulk(code, id, resultcreateBulk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to delete test run result.
     * @summary Delete test run result
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    deleteResult(code, id, hash, options) {
        return (0, exports.ResultsApiFp)(this.configuration).deleteResult(code, id, hash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve a specific test run result by Hash.
     * @summary Get test run result by code
     * @param {string} code Code of project, where to search entities.
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    getResult(code, hash, options) {
        return (0, exports.ResultsApiFp)(this.configuration).getResult(code, hash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all test run results stored in selected project.
     * @summary Get all test run results
     * @param {string} code Code of project, where to search entities.
     * @param {string} [status] A single test run result status. Possible values: in_progress, passed, failed, blocked, skipped, invalid.
     * @param {string} [run] A list of run IDs separated by comma.
     * @param {string} [caseId] A list of case IDs separated by comma.
     * @param {string} [member] A list of member IDs separated by comma.
     * @param {boolean} [api]
     * @param {string} [fromEndTime] Will return all results created after provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
     * @param {string} [toEndTime] Will return all results created before provided datetime. Allowed format: &#x60;Y-m-d H:i:s&#x60;.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    getResults(code, status, run, caseId, member, api, fromEndTime, toEndTime, limit, offset, options) {
        return (0, exports.ResultsApiFp)(this.configuration).getResults(code, status, run, caseId, member, api, fromEndTime, toEndTime, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to update test run result.
     * @summary Update test run result
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} hash Hash.
     * @param {ResultUpdate} resultUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultsApi
     */
    updateResult(code, id, hash, resultUpdate, options) {
        return (0, exports.ResultsApiFp)(this.configuration).updateResult(code, id, hash, resultUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ResultsApi = ResultsApi;
