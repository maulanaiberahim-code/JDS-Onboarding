/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BaseResponse } from '../model';
import { DefectCreate } from '../model';
import { DefectListResponse } from '../model';
import { DefectResponse } from '../model';
import { DefectStatus } from '../model';
import { DefectUpdate } from '../model';
import { IdResponse } from '../model';
/**
 * DefectsApi - axios parameter creator
 * @export
 */
export declare const DefectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method allows to create a defect in selected project.
     * @summary Create a new defect
     * @param {string} code Code of project, where to search entities.
     * @param {DefectCreate} defectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDefect: (code: string, defectCreate: DefectCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method completely deletes a defect from repository.
     * @summary Delete defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDefect: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific defect.
     * @summary Get a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefect: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all defects stored in selected project.
     * @summary Get all defects
     * @param {string} code Code of project, where to search entities.
     * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefects: (code: string, status?: 'open' | 'resolved' | 'in_progress' | 'invalid', limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to resolve a specific defect.
     * @summary Resolve a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveDefect: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method updates a defect.
     * @summary Update defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectUpdate} defectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDefect: (code: string, id: number, defectUpdate: DefectUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to update a specific defect status.
     * @summary Update a specific defect status
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectStatus} defectStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDefectStatus: (code: string, id: number, defectStatus: DefectStatus, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefectsApi - functional programming interface
 * @export
 */
export declare const DefectsApiFp: (configuration?: Configuration) => {
    /**
     * This method allows to create a defect in selected project.
     * @summary Create a new defect
     * @param {string} code Code of project, where to search entities.
     * @param {DefectCreate} defectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDefect(code: string, defectCreate: DefectCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method completely deletes a defect from repository.
     * @summary Delete defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDefect(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve a specific defect.
     * @summary Get a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefect(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefectResponse>>;
    /**
     * This method allows to retrieve all defects stored in selected project.
     * @summary Get all defects
     * @param {string} code Code of project, where to search entities.
     * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefects(code: string, status?: 'open' | 'resolved' | 'in_progress' | 'invalid', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefectListResponse>>;
    /**
     * This method allows to resolve a specific defect.
     * @summary Resolve a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveDefect(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method updates a defect.
     * @summary Update defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectUpdate} defectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDefect(code: string, id: number, defectUpdate: DefectUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to update a specific defect status.
     * @summary Update a specific defect status
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectStatus} defectStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDefectStatus(code: string, id: number, defectStatus: DefectStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
};
/**
 * DefectsApi - factory interface
 * @export
 */
export declare const DefectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method allows to create a defect in selected project.
     * @summary Create a new defect
     * @param {string} code Code of project, where to search entities.
     * @param {DefectCreate} defectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDefect(code: string, defectCreate: DefectCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method completely deletes a defect from repository.
     * @summary Delete defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDefect(code: string, id: number, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve a specific defect.
     * @summary Get a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefect(code: string, id: number, options?: any): AxiosPromise<DefectResponse>;
    /**
     * This method allows to retrieve all defects stored in selected project.
     * @summary Get all defects
     * @param {string} code Code of project, where to search entities.
     * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDefects(code: string, status?: 'open' | 'resolved' | 'in_progress' | 'invalid', limit?: number, offset?: number, options?: any): AxiosPromise<DefectListResponse>;
    /**
     * This method allows to resolve a specific defect.
     * @summary Resolve a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveDefect(code: string, id: number, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method updates a defect.
     * @summary Update defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectUpdate} defectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDefect(code: string, id: number, defectUpdate: DefectUpdate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to update a specific defect status.
     * @summary Update a specific defect status
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectStatus} defectStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDefectStatus(code: string, id: number, defectStatus: DefectStatus, options?: any): AxiosPromise<BaseResponse>;
};
/**
 * DefectsApi - object-oriented interface
 * @export
 * @class DefectsApi
 * @extends {BaseAPI}
 */
export declare class DefectsApi extends BaseAPI {
    /**
     * This method allows to create a defect in selected project.
     * @summary Create a new defect
     * @param {string} code Code of project, where to search entities.
     * @param {DefectCreate} defectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    createDefect(code: string, defectCreate: DefectCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method completely deletes a defect from repository.
     * @summary Delete defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    deleteDefect(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve a specific defect.
     * @summary Get a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    getDefect(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DefectResponse, any>>;
    /**
     * This method allows to retrieve all defects stored in selected project.
     * @summary Get all defects
     * @param {string} code Code of project, where to search entities.
     * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    getDefects(code: string, status?: 'open' | 'resolved' | 'in_progress' | 'invalid', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DefectListResponse, any>>;
    /**
     * This method allows to resolve a specific defect.
     * @summary Resolve a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    resolveDefect(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method updates a defect.
     * @summary Update defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectUpdate} defectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    updateDefect(code: string, id: number, defectUpdate: DefectUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to update a specific defect status.
     * @summary Update a specific defect status
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectStatus} defectStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    updateDefectStatus(code: string, id: number, defectStatus: DefectStatus, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BaseResponse, any>>;
}
