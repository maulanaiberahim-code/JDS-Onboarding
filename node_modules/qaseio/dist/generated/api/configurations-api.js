"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationsApi = exports.ConfigurationsApiFactory = exports.ConfigurationsApiFp = exports.ConfigurationsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
const ConfigurationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to create a configuration in selected project.
         * @summary Create a new configuration in a particular group.
         * @param {string} code Code of project, where to search entities.
         * @param {ConfigurationCreate} configurationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfiguration: (code_1, configurationCreate_1, ...args_1) => __awaiter(this, [code_1, configurationCreate_1, ...args_1], void 0, function* (code, configurationCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createConfiguration', 'code', code);
            // verify required parameter 'configurationCreate' is not null or undefined
            (0, common_1.assertParamExists)('createConfiguration', 'configurationCreate', configurationCreate);
            const localVarPath = `/v1/configuration/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(configurationCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to create a configuration group in selected project.
         * @summary Create a new configuration group.
         * @param {string} code Code of project, where to search entities.
         * @param {ConfigurationGroupCreate} configurationGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfigurationGroup: (code_2, configurationGroupCreate_1, ...args_2) => __awaiter(this, [code_2, configurationGroupCreate_1, ...args_2], void 0, function* (code, configurationGroupCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createConfigurationGroup', 'code', code);
            // verify required parameter 'configurationGroupCreate' is not null or undefined
            (0, common_1.assertParamExists)('createConfigurationGroup', 'configurationGroupCreate', configurationGroupCreate);
            const localVarPath = `/v1/configuration/{code}/group`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(configurationGroupCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all configurations groups with configurations
         * @summary Get all configuration groups with configurations.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurations: (code_3, ...args_3) => __awaiter(this, [code_3, ...args_3], void 0, function* (code, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getConfigurations', 'code', code);
            const localVarPath = `/v1/configuration/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ConfigurationsApiAxiosParamCreator = ConfigurationsApiAxiosParamCreator;
/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
const ConfigurationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ConfigurationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to create a configuration in selected project.
         * @summary Create a new configuration in a particular group.
         * @param {string} code Code of project, where to search entities.
         * @param {ConfigurationCreate} configurationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfiguration(code, configurationCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConfiguration(code, configurationCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to create a configuration group in selected project.
         * @summary Create a new configuration group.
         * @param {string} code Code of project, where to search entities.
         * @param {ConfigurationGroupCreate} configurationGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfigurationGroup(code, configurationGroupCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createConfigurationGroup(code, configurationGroupCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all configurations groups with configurations
         * @summary Get all configuration groups with configurations.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurations(code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConfigurations(code, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ConfigurationsApiFp = ConfigurationsApiFp;
/**
 * ConfigurationsApi - factory interface
 * @export
 */
const ConfigurationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ConfigurationsApiFp)(configuration);
    return {
        /**
         * This method allows to create a configuration in selected project.
         * @summary Create a new configuration in a particular group.
         * @param {string} code Code of project, where to search entities.
         * @param {ConfigurationCreate} configurationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfiguration(code, configurationCreate, options) {
            return localVarFp.createConfiguration(code, configurationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to create a configuration group in selected project.
         * @summary Create a new configuration group.
         * @param {string} code Code of project, where to search entities.
         * @param {ConfigurationGroupCreate} configurationGroupCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfigurationGroup(code, configurationGroupCreate, options) {
            return localVarFp.createConfigurationGroup(code, configurationGroupCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all configurations groups with configurations
         * @summary Get all configuration groups with configurations.
         * @param {string} code Code of project, where to search entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurations(code, options) {
            return localVarFp.getConfigurations(code, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ConfigurationsApiFactory = ConfigurationsApiFactory;
/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
class ConfigurationsApi extends base_1.BaseAPI {
    /**
     * This method allows to create a configuration in selected project.
     * @summary Create a new configuration in a particular group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationCreate} configurationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    createConfiguration(code, configurationCreate, options) {
        return (0, exports.ConfigurationsApiFp)(this.configuration).createConfiguration(code, configurationCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to create a configuration group in selected project.
     * @summary Create a new configuration group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationGroupCreate} configurationGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    createConfigurationGroup(code, configurationGroupCreate, options) {
        return (0, exports.ConfigurationsApiFp)(this.configuration).createConfigurationGroup(code, configurationGroupCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all configurations groups with configurations
     * @summary Get all configuration groups with configurations.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    getConfigurations(code, options) {
        return (0, exports.ConfigurationsApiFp)(this.configuration).getConfigurations(code, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ConfigurationsApi = ConfigurationsApi;
