/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ConfigurationCreate } from '../model';
import { ConfigurationGroupCreate } from '../model';
import { ConfigurationListResponse } from '../model';
import { IdResponse } from '../model';
/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
export declare const ConfigurationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method allows to create a configuration in selected project.
     * @summary Create a new configuration in a particular group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationCreate} configurationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfiguration: (code: string, configurationCreate: ConfigurationCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to create a configuration group in selected project.
     * @summary Create a new configuration group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationGroupCreate} configurationGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfigurationGroup: (code: string, configurationGroupCreate: ConfigurationGroupCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all configurations groups with configurations
     * @summary Get all configuration groups with configurations.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigurations: (code: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
export declare const ConfigurationsApiFp: (configuration?: Configuration) => {
    /**
     * This method allows to create a configuration in selected project.
     * @summary Create a new configuration in a particular group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationCreate} configurationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfiguration(code: string, configurationCreate: ConfigurationCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to create a configuration group in selected project.
     * @summary Create a new configuration group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationGroupCreate} configurationGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfigurationGroup(code: string, configurationGroupCreate: ConfigurationGroupCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve all configurations groups with configurations
     * @summary Get all configuration groups with configurations.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigurations(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationListResponse>>;
};
/**
 * ConfigurationsApi - factory interface
 * @export
 */
export declare const ConfigurationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method allows to create a configuration in selected project.
     * @summary Create a new configuration in a particular group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationCreate} configurationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfiguration(code: string, configurationCreate: ConfigurationCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to create a configuration group in selected project.
     * @summary Create a new configuration group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationGroupCreate} configurationGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfigurationGroup(code: string, configurationGroupCreate: ConfigurationGroupCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve all configurations groups with configurations
     * @summary Get all configuration groups with configurations.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigurations(code: string, options?: any): AxiosPromise<ConfigurationListResponse>;
};
/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
export declare class ConfigurationsApi extends BaseAPI {
    /**
     * This method allows to create a configuration in selected project.
     * @summary Create a new configuration in a particular group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationCreate} configurationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    createConfiguration(code: string, configurationCreate: ConfigurationCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to create a configuration group in selected project.
     * @summary Create a new configuration group.
     * @param {string} code Code of project, where to search entities.
     * @param {ConfigurationGroupCreate} configurationGroupCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    createConfigurationGroup(code: string, configurationGroupCreate: ConfigurationGroupCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve all configurations groups with configurations
     * @summary Get all configuration groups with configurations.
     * @param {string} code Code of project, where to search entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    getConfigurations(code: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigurationListResponse, any>>;
}
