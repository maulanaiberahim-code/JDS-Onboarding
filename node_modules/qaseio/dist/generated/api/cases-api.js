"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CasesApi = exports.CasesApiFactory = exports.CasesApiFp = exports.CasesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * CasesApi - axios parameter creator
 * @export
 */
const CasesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to bulk create new test cases in a project.
         * @summary Create test cases in bulk
         * @param {string} code Code of project, where to search entities.
         * @param {TestCasebulk} testCasebulk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulk: (code_1, testCasebulk_1, ...args_1) => __awaiter(this, [code_1, testCasebulk_1, ...args_1], void 0, function* (code, testCasebulk, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('bulk', 'code', code);
            // verify required parameter 'testCasebulk' is not null or undefined
            (0, common_1.assertParamExists)('bulk', 'testCasebulk', testCasebulk);
            const localVarPath = `/v1/case/{code}/bulk`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCasebulk, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Attach the external issues to the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseAttachExternalIssue: (code_2, testCaseexternalIssues_1, ...args_2) => __awaiter(this, [code_2, testCaseexternalIssues_1, ...args_2], void 0, function* (code, testCaseexternalIssues, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('caseAttachExternalIssue', 'code', code);
            // verify required parameter 'testCaseexternalIssues' is not null or undefined
            (0, common_1.assertParamExists)('caseAttachExternalIssue', 'testCaseexternalIssues', testCaseexternalIssues);
            const localVarPath = `/v1/case/{code}/external-issue/attach`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCaseexternalIssues, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Detach the external issues from the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDetachExternalIssue: (code_3, testCaseexternalIssues_2, ...args_3) => __awaiter(this, [code_3, testCaseexternalIssues_2, ...args_3], void 0, function* (code, testCaseexternalIssues, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('caseDetachExternalIssue', 'code', code);
            // verify required parameter 'testCaseexternalIssues' is not null or undefined
            (0, common_1.assertParamExists)('caseDetachExternalIssue', 'testCaseexternalIssues', testCaseexternalIssues);
            const localVarPath = `/v1/case/{code}/external-issue/detach`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCaseexternalIssues, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to create a new test case in selected project.
         * @summary Create a new test case
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase: (code_4, testCaseCreate_1, ...args_4) => __awaiter(this, [code_4, testCaseCreate_1, ...args_4], void 0, function* (code, testCaseCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createCase', 'code', code);
            // verify required parameter 'testCaseCreate' is not null or undefined
            (0, common_1.assertParamExists)('createCase', 'testCaseCreate', testCaseCreate);
            const localVarPath = `/v1/case/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCaseCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method completely deletes a test case from repository.
         * @summary Delete test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase: (code_5, id_1, ...args_5) => __awaiter(this, [code_5, id_1, ...args_5], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('deleteCase', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteCase', 'id', id);
            const localVarPath = `/v1/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve a specific test case.
         * @summary Get a specific test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase: (code_6, id_2, ...args_6) => __awaiter(this, [code_6, id_2, ...args_6], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getCase', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getCase', 'id', id);
            const localVarPath = `/v1/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all test cases stored in selected project.
         * @summary Get all test cases
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [milestoneId] ID of milestone.
         * @param {number} [suiteId] ID of test suite.
         * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
         * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
         * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
         * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
         * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
         * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
         * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
         * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
         * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases: (code_7, search_1, milestoneId_1, suiteId_1, severity_1, priority_1, type_1, behavior_1, automation_1, status_1, externalIssuesType_1, externalIssuesIds_1, include_1, limit_1, offset_1, ...args_7) => __awaiter(this, [code_7, search_1, milestoneId_1, suiteId_1, severity_1, priority_1, type_1, behavior_1, automation_1, status_1, externalIssuesType_1, externalIssuesIds_1, include_1, limit_1, offset_1, ...args_7], void 0, function* (code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getCases', 'code', code);
            const localVarPath = `/v1/case/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (milestoneId !== undefined) {
                localVarQueryParameter['milestone_id'] = milestoneId;
            }
            if (suiteId !== undefined) {
                localVarQueryParameter['suite_id'] = suiteId;
            }
            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }
            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }
            if (automation !== undefined) {
                localVarQueryParameter['automation'] = automation;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (externalIssuesType !== undefined) {
                localVarQueryParameter['external_issues[type]'] = externalIssuesType;
            }
            if (externalIssuesIds) {
                localVarQueryParameter['external_issues[ids][]'] = externalIssuesIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method updates a test case.
         * @summary Update test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase: (code_8, id_3, testCaseUpdate_1, ...args_8) => __awaiter(this, [code_8, id_3, testCaseUpdate_1, ...args_8], void 0, function* (code, id, testCaseUpdate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('updateCase', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateCase', 'id', id);
            // verify required parameter 'testCaseUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateCase', 'testCaseUpdate', testCaseUpdate);
            const localVarPath = `/v1/case/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testCaseUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CasesApiAxiosParamCreator = CasesApiAxiosParamCreator;
/**
 * CasesApi - functional programming interface
 * @export
 */
const CasesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CasesApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to bulk create new test cases in a project.
         * @summary Create test cases in bulk
         * @param {string} code Code of project, where to search entities.
         * @param {TestCasebulk} testCasebulk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulk(code, testCasebulk, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bulk(code, testCasebulk, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Attach the external issues to the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseAttachExternalIssue(code, testCaseexternalIssues, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.caseAttachExternalIssue(code, testCaseexternalIssues, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Detach the external issues from the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDetachExternalIssue(code, testCaseexternalIssues, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.caseDetachExternalIssue(code, testCaseexternalIssues, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to create a new test case in selected project.
         * @summary Create a new test case
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase(code, testCaseCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCase(code, testCaseCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method completely deletes a test case from repository.
         * @summary Delete test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteCase(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve a specific test case.
         * @summary Get a specific test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCase(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all test cases stored in selected project.
         * @summary Get all test cases
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [milestoneId] ID of milestone.
         * @param {number} [suiteId] ID of test suite.
         * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
         * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
         * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
         * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
         * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
         * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
         * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
         * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
         * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method updates a test case.
         * @summary Update test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase(code, id, testCaseUpdate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateCase(code, id, testCaseUpdate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.CasesApiFp = CasesApiFp;
/**
 * CasesApi - factory interface
 * @export
 */
const CasesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CasesApiFp)(configuration);
    return {
        /**
         * This method allows to bulk create new test cases in a project.
         * @summary Create test cases in bulk
         * @param {string} code Code of project, where to search entities.
         * @param {TestCasebulk} testCasebulk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulk(code, testCasebulk, options) {
            return localVarFp.bulk(code, testCasebulk, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Attach the external issues to the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseAttachExternalIssue(code, testCaseexternalIssues, options) {
            return localVarFp.caseAttachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Detach the external issues from the test cases
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseexternalIssues} testCaseexternalIssues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        caseDetachExternalIssue(code, testCaseexternalIssues, options) {
            return localVarFp.caseDetachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to create a new test case in selected project.
         * @summary Create a new test case
         * @param {string} code Code of project, where to search entities.
         * @param {TestCaseCreate} testCaseCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCase(code, testCaseCreate, options) {
            return localVarFp.createCase(code, testCaseCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a test case from repository.
         * @summary Delete test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCase(code, id, options) {
            return localVarFp.deleteCase(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific test case.
         * @summary Get a specific test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCase(code, id, options) {
            return localVarFp.getCase(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all test cases stored in selected project.
         * @summary Get all test cases
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [milestoneId] ID of milestone.
         * @param {number} [suiteId] ID of test suite.
         * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
         * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
         * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
         * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
         * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
         * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
         * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
         * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
         * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options) {
            return localVarFp.getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a test case.
         * @summary Update test case
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {TestCaseUpdate} testCaseUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCase(code, id, testCaseUpdate, options) {
            return localVarFp.updateCase(code, id, testCaseUpdate, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CasesApiFactory = CasesApiFactory;
/**
 * CasesApi - object-oriented interface
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
class CasesApi extends base_1.BaseAPI {
    /**
     * This method allows to bulk create new test cases in a project.
     * @summary Create test cases in bulk
     * @param {string} code Code of project, where to search entities.
     * @param {TestCasebulk} testCasebulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    bulk(code, testCasebulk, options) {
        return (0, exports.CasesApiFp)(this.configuration).bulk(code, testCasebulk, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Attach the external issues to the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    caseAttachExternalIssue(code, testCaseexternalIssues, options) {
        return (0, exports.CasesApiFp)(this.configuration).caseAttachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Detach the external issues from the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    caseDetachExternalIssue(code, testCaseexternalIssues, options) {
        return (0, exports.CasesApiFp)(this.configuration).caseDetachExternalIssue(code, testCaseexternalIssues, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    createCase(code, testCaseCreate, options) {
        return (0, exports.CasesApiFp)(this.configuration).createCase(code, testCaseCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    deleteCase(code, id, options) {
        return (0, exports.CasesApiFp)(this.configuration).deleteCase(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    getCase(code, id, options) {
        return (0, exports.CasesApiFp)(this.configuration).getCase(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [milestoneId] ID of milestone.
     * @param {number} [suiteId] ID of test suite.
     * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
     * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
     * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
     * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
     * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
     * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
     * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
     * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
     * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options) {
        return (0, exports.CasesApiFp)(this.configuration).getCases(code, search, milestoneId, suiteId, severity, priority, type, behavior, automation, status, externalIssuesType, externalIssuesIds, include, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method updates a test case.
     * @summary Update test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    updateCase(code, id, testCaseUpdate, options) {
        return (0, exports.CasesApiFp)(this.configuration).updateCase(code, id, testCaseUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CasesApi = CasesApi;
