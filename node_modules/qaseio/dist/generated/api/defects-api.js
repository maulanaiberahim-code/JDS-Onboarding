"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefectsApi = exports.DefectsApiFactory = exports.DefectsApiFp = exports.DefectsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * DefectsApi - axios parameter creator
 * @export
 */
const DefectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to create a defect in selected project.
         * @summary Create a new defect
         * @param {string} code Code of project, where to search entities.
         * @param {DefectCreate} defectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefect: (code_1, defectCreate_1, ...args_1) => __awaiter(this, [code_1, defectCreate_1, ...args_1], void 0, function* (code, defectCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createDefect', 'code', code);
            // verify required parameter 'defectCreate' is not null or undefined
            (0, common_1.assertParamExists)('createDefect', 'defectCreate', defectCreate);
            const localVarPath = `/v1/defect/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(defectCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method completely deletes a defect from repository.
         * @summary Delete defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefect: (code_2, id_1, ...args_2) => __awaiter(this, [code_2, id_1, ...args_2], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('deleteDefect', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteDefect', 'id', id);
            const localVarPath = `/v1/defect/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve a specific defect.
         * @summary Get a specific defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefect: (code_3, id_2, ...args_3) => __awaiter(this, [code_3, id_2, ...args_3], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getDefect', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getDefect', 'id', id);
            const localVarPath = `/v1/defect/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all defects stored in selected project.
         * @summary Get all defects
         * @param {string} code Code of project, where to search entities.
         * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefects: (code_4, status_1, limit_1, offset_1, ...args_4) => __awaiter(this, [code_4, status_1, limit_1, offset_1, ...args_4], void 0, function* (code, status, limit, offset, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getDefects', 'code', code);
            const localVarPath = `/v1/defect/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to resolve a specific defect.
         * @summary Resolve a specific defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveDefect: (code_5, id_3, ...args_5) => __awaiter(this, [code_5, id_3, ...args_5], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('resolveDefect', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('resolveDefect', 'id', id);
            const localVarPath = `/v1/defect/{code}/resolve/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method updates a defect.
         * @summary Update defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {DefectUpdate} defectUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefect: (code_6, id_4, defectUpdate_1, ...args_6) => __awaiter(this, [code_6, id_4, defectUpdate_1, ...args_6], void 0, function* (code, id, defectUpdate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('updateDefect', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateDefect', 'id', id);
            // verify required parameter 'defectUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateDefect', 'defectUpdate', defectUpdate);
            const localVarPath = `/v1/defect/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(defectUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to update a specific defect status.
         * @summary Update a specific defect status
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {DefectStatus} defectStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefectStatus: (code_7, id_5, defectStatus_1, ...args_7) => __awaiter(this, [code_7, id_5, defectStatus_1, ...args_7], void 0, function* (code, id, defectStatus, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('updateDefectStatus', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateDefectStatus', 'id', id);
            // verify required parameter 'defectStatus' is not null or undefined
            (0, common_1.assertParamExists)('updateDefectStatus', 'defectStatus', defectStatus);
            const localVarPath = `/v1/defect/{code}/status/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(defectStatus, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DefectsApiAxiosParamCreator = DefectsApiAxiosParamCreator;
/**
 * DefectsApi - functional programming interface
 * @export
 */
const DefectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefectsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to create a defect in selected project.
         * @summary Create a new defect
         * @param {string} code Code of project, where to search entities.
         * @param {DefectCreate} defectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefect(code, defectCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDefect(code, defectCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method completely deletes a defect from repository.
         * @summary Delete defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefect(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDefect(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve a specific defect.
         * @summary Get a specific defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefect(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDefect(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all defects stored in selected project.
         * @summary Get all defects
         * @param {string} code Code of project, where to search entities.
         * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefects(code, status, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDefects(code, status, limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to resolve a specific defect.
         * @summary Resolve a specific defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveDefect(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resolveDefect(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method updates a defect.
         * @summary Update defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {DefectUpdate} defectUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefect(code, id, defectUpdate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateDefect(code, id, defectUpdate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to update a specific defect status.
         * @summary Update a specific defect status
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {DefectStatus} defectStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefectStatus(code, id, defectStatus, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateDefectStatus(code, id, defectStatus, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DefectsApiFp = DefectsApiFp;
/**
 * DefectsApi - factory interface
 * @export
 */
const DefectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefectsApiFp)(configuration);
    return {
        /**
         * This method allows to create a defect in selected project.
         * @summary Create a new defect
         * @param {string} code Code of project, where to search entities.
         * @param {DefectCreate} defectCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefect(code, defectCreate, options) {
            return localVarFp.createDefect(code, defectCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a defect from repository.
         * @summary Delete defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefect(code, id, options) {
            return localVarFp.deleteDefect(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific defect.
         * @summary Get a specific defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefect(code, id, options) {
            return localVarFp.getDefect(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all defects stored in selected project.
         * @summary Get all defects
         * @param {string} code Code of project, where to search entities.
         * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefects(code, status, limit, offset, options) {
            return localVarFp.getDefects(code, status, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to resolve a specific defect.
         * @summary Resolve a specific defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveDefect(code, id, options) {
            return localVarFp.resolveDefect(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a defect.
         * @summary Update defect
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {DefectUpdate} defectUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefect(code, id, defectUpdate, options) {
            return localVarFp.updateDefect(code, id, defectUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to update a specific defect status.
         * @summary Update a specific defect status
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {DefectStatus} defectStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefectStatus(code, id, defectStatus, options) {
            return localVarFp.updateDefectStatus(code, id, defectStatus, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefectsApiFactory = DefectsApiFactory;
/**
 * DefectsApi - object-oriented interface
 * @export
 * @class DefectsApi
 * @extends {BaseAPI}
 */
class DefectsApi extends base_1.BaseAPI {
    /**
     * This method allows to create a defect in selected project.
     * @summary Create a new defect
     * @param {string} code Code of project, where to search entities.
     * @param {DefectCreate} defectCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    createDefect(code, defectCreate, options) {
        return (0, exports.DefectsApiFp)(this.configuration).createDefect(code, defectCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method completely deletes a defect from repository.
     * @summary Delete defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    deleteDefect(code, id, options) {
        return (0, exports.DefectsApiFp)(this.configuration).deleteDefect(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve a specific defect.
     * @summary Get a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    getDefect(code, id, options) {
        return (0, exports.DefectsApiFp)(this.configuration).getDefect(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all defects stored in selected project.
     * @summary Get all defects
     * @param {string} code Code of project, where to search entities.
     * @param {'open' | 'resolved' | 'in_progress' | 'invalid'} [status]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    getDefects(code, status, limit, offset, options) {
        return (0, exports.DefectsApiFp)(this.configuration).getDefects(code, status, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to resolve a specific defect.
     * @summary Resolve a specific defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    resolveDefect(code, id, options) {
        return (0, exports.DefectsApiFp)(this.configuration).resolveDefect(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method updates a defect.
     * @summary Update defect
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectUpdate} defectUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    updateDefect(code, id, defectUpdate, options) {
        return (0, exports.DefectsApiFp)(this.configuration).updateDefect(code, id, defectUpdate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to update a specific defect status.
     * @summary Update a specific defect status
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {DefectStatus} defectStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefectsApi
     */
    updateDefectStatus(code, id, defectStatus, options) {
        return (0, exports.DefectsApiFp)(this.configuration).updateDefectStatus(code, id, defectStatus, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefectsApi = DefectsApi;
