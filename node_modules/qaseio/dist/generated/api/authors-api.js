"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorsApi = exports.AuthorsApiFactory = exports.AuthorsApiFp = exports.AuthorsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
const AuthorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to retrieve a specific author.
         * @summary Get a specific author
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthor: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getAuthor', 'id', id);
            const localVarPath = `/v1/author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all authors in selected project.
         * @summary Get all authors
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {'app' | 'user'} [type]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthors: (search_1, type_1, limit_1, offset_1, ...args_2) => __awaiter(this, [search_1, type_1, limit_1, offset_1, ...args_2], void 0, function* (search, type, limit, offset, options = {}) {
            const localVarPath = `/v1/author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthorsApiAxiosParamCreator = AuthorsApiAxiosParamCreator;
/**
 * AuthorsApi - functional programming interface
 * @export
 */
const AuthorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthorsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to retrieve a specific author.
         * @summary Get a specific author
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthor(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthor(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all authors in selected project.
         * @summary Get all authors
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {'app' | 'user'} [type]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthors(search, type, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthors(search, type, limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthorsApiFp = AuthorsApiFp;
/**
 * AuthorsApi - factory interface
 * @export
 */
const AuthorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthorsApiFp)(configuration);
    return {
        /**
         * This method allows to retrieve a specific author.
         * @summary Get a specific author
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthor(id, options) {
            return localVarFp.getAuthor(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all authors in selected project.
         * @summary Get all authors
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {'app' | 'user'} [type]
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthors(search, type, limit, offset, options) {
            return localVarFp.getAuthors(search, type, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthorsApiFactory = AuthorsApiFactory;
/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
class AuthorsApi extends base_1.BaseAPI {
    /**
     * This method allows to retrieve a specific author.
     * @summary Get a specific author
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthor(id, options) {
        return (0, exports.AuthorsApiFp)(this.configuration).getAuthor(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all authors in selected project.
     * @summary Get all authors
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {'app' | 'user'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    getAuthors(search, type, limit, offset, options) {
        return (0, exports.AuthorsApiFp)(this.configuration).getAuthors(search, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthorsApi = AuthorsApi;
