"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachmentsApi = exports.AttachmentsApiFactory = exports.AttachmentsApiFp = exports.AttachmentsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
const AttachmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to remove attachment by Hash.
         * @summary Remove attachment by Hash
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment: (hash_1, ...args_1) => __awaiter(this, [hash_1, ...args_1], void 0, function* (hash, options = {}) {
            // verify required parameter 'hash' is not null or undefined
            (0, common_1.assertParamExists)('deleteAttachment', 'hash', hash);
            const localVarPath = `/v1/attachment/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve attachment by Hash.
         * @summary Get attachment by Hash
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: (hash_2, ...args_2) => __awaiter(this, [hash_2, ...args_2], void 0, function* (hash, options = {}) {
            // verify required parameter 'hash' is not null or undefined
            (0, common_1.assertParamExists)('getAttachment', 'hash', hash);
            const localVarPath = `/v1/attachment/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve attachments.
         * @summary Get all attachments
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments: (limit_1, offset_1, ...args_3) => __awaiter(this, [limit_1, offset_1, ...args_3], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/v1/attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to upload attachment to Qase. Max upload size: * Up to 32 Mb per file * Up to 128 Mb per single request * Up to 20 files per single request  If there is no free space left in your team account, you will receive an error with code 507 - Insufficient Storage.
         * @summary Upload attachment
         * @param {string} code Code of project, where to search entities.
         * @param {Array<any>} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment: (code_1, file_1, ...args_4) => __awaiter(this, [code_1, file_1, ...args_4], void 0, function* (code, file, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('uploadAttachment', 'code', code);
            const localVarPath = `/v1/attachment/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (file) {
                file.forEach((element) => {
                    if ((element === null || element === void 0 ? void 0 : element.name) !== undefined && (element === null || element === void 0 ? void 0 : element.value) !== undefined) {
                        localVarFormParams.append('file', element.value, element.name);
                    }
                    else {
                        localVarFormParams.append('file', element);
                    }
                });
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data; boundary=' + localVarFormParams.getBoundary();
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AttachmentsApiAxiosParamCreator = AttachmentsApiAxiosParamCreator;
/**
 * AttachmentsApi - functional programming interface
 * @export
 */
const AttachmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AttachmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to remove attachment by Hash.
         * @summary Remove attachment by Hash
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment(hash, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAttachment(hash, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve attachment by Hash.
         * @summary Get attachment by Hash
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment(hash, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAttachment(hash, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve attachments.
         * @summary Get all attachments
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAttachments(limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to upload attachment to Qase. Max upload size: * Up to 32 Mb per file * Up to 128 Mb per single request * Up to 20 files per single request  If there is no free space left in your team account, you will receive an error with code 507 - Insufficient Storage.
         * @summary Upload attachment
         * @param {string} code Code of project, where to search entities.
         * @param {Array<File>} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(code, file, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.uploadAttachment(code, file, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AttachmentsApiFp = AttachmentsApiFp;
/**
 * AttachmentsApi - factory interface
 * @export
 */
const AttachmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AttachmentsApiFp)(configuration);
    return {
        /**
         * This method allows to remove attachment by Hash.
         * @summary Remove attachment by Hash
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment(hash, options) {
            return localVarFp.deleteAttachment(hash, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve attachment by Hash.
         * @summary Get attachment by Hash
         * @param {string} hash Hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment(hash, options) {
            return localVarFp.getAttachment(hash, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve attachments.
         * @summary Get all attachments
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments(limit, offset, options) {
            return localVarFp.getAttachments(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to upload attachment to Qase. Max upload size: * Up to 32 Mb per file * Up to 128 Mb per single request * Up to 20 files per single request  If there is no free space left in your team account, you will receive an error with code 507 - Insufficient Storage.
         * @summary Upload attachment
         * @param {string} code Code of project, where to search entities.
         * @param {Array<any>} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(code, file, options) {
            return localVarFp.uploadAttachment(code, file, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AttachmentsApiFactory = AttachmentsApiFactory;
/**
 * AttachmentsApi - object-oriented interface
 * @export
 * @class AttachmentsApi
 * @extends {BaseAPI}
 */
class AttachmentsApi extends base_1.BaseAPI {
    /**
     * This method allows to remove attachment by Hash.
     * @summary Remove attachment by Hash
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    deleteAttachment(hash, options) {
        return (0, exports.AttachmentsApiFp)(this.configuration).deleteAttachment(hash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve attachment by Hash.
     * @summary Get attachment by Hash
     * @param {string} hash Hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    getAttachment(hash, options) {
        return (0, exports.AttachmentsApiFp)(this.configuration).getAttachment(hash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve attachments.
     * @summary Get all attachments
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    getAttachments(limit, offset, options) {
        return (0, exports.AttachmentsApiFp)(this.configuration).getAttachments(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to upload attachment to Qase. Max upload size: * Up to 32 Mb per file * Up to 128 Mb per single request * Up to 20 files per single request  If there is no free space left in your team account, you will receive an error with code 507 - Insufficient Storage.
     * @summary Upload attachment
     * @param {string} code Code of project, where to search entities.
     * @param {Array<any>} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    uploadAttachment(code, file, options) {
        return (0, exports.AttachmentsApiFp)(this.configuration).uploadAttachment(code, file, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AttachmentsApi = AttachmentsApi;
