"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MilestonesApi = exports.MilestonesApiFactory = exports.MilestonesApiFp = exports.MilestonesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * MilestonesApi - axios parameter creator
 * @export
 */
const MilestonesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to create a milestone in selected project.
         * @summary Create a new milestone
         * @param {string} code Code of project, where to search entities.
         * @param {MilestoneCreate} milestoneCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMilestone: (code_1, milestoneCreate_1, ...args_1) => __awaiter(this, [code_1, milestoneCreate_1, ...args_1], void 0, function* (code, milestoneCreate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('createMilestone', 'code', code);
            // verify required parameter 'milestoneCreate' is not null or undefined
            (0, common_1.assertParamExists)('createMilestone', 'milestoneCreate', milestoneCreate);
            const localVarPath = `/v1/milestone/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(milestoneCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method completely deletes a milestone from repository.
         * @summary Delete milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: (code_2, id_1, ...args_2) => __awaiter(this, [code_2, id_1, ...args_2], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('deleteMilestone', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteMilestone', 'id', id);
            const localVarPath = `/v1/milestone/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve a specific milestone.
         * @summary Get a specific milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestone: (code_3, id_2, ...args_3) => __awaiter(this, [code_3, id_2, ...args_3], void 0, function* (code, id, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getMilestone', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getMilestone', 'id', id);
            const localVarPath = `/v1/milestone/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to retrieve all milestones stored in selected project.
         * @summary Get all milestones
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestones: (code_4, search_1, limit_1, offset_1, ...args_4) => __awaiter(this, [code_4, search_1, limit_1, offset_1, ...args_4], void 0, function* (code, search, limit, offset, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('getMilestones', 'code', code);
            const localVarPath = `/v1/milestone/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method updates a milestone.
         * @summary Update milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {MilestoneUpdate} milestoneUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestone: (code_5, id_3, milestoneUpdate_1, ...args_5) => __awaiter(this, [code_5, id_3, milestoneUpdate_1, ...args_5], void 0, function* (code, id, milestoneUpdate, options = {}) {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('updateMilestone', 'code', code);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateMilestone', 'id', id);
            // verify required parameter 'milestoneUpdate' is not null or undefined
            (0, common_1.assertParamExists)('updateMilestone', 'milestoneUpdate', milestoneUpdate);
            const localVarPath = `/v1/milestone/{code}/{id}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(milestoneUpdate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MilestonesApiAxiosParamCreator = MilestonesApiAxiosParamCreator;
/**
 * MilestonesApi - functional programming interface
 * @export
 */
const MilestonesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MilestonesApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to create a milestone in selected project.
         * @summary Create a new milestone
         * @param {string} code Code of project, where to search entities.
         * @param {MilestoneCreate} milestoneCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMilestone(code, milestoneCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMilestone(code, milestoneCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method completely deletes a milestone from repository.
         * @summary Delete milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteMilestone(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve a specific milestone.
         * @summary Get a specific milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestone(code, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMilestone(code, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to retrieve all milestones stored in selected project.
         * @summary Get all milestones
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestones(code, search, limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMilestones(code, search, limit, offset, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method updates a milestone.
         * @summary Update milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {MilestoneUpdate} milestoneUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestone(code, id, milestoneUpdate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMilestone(code, id, milestoneUpdate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.MilestonesApiFp = MilestonesApiFp;
/**
 * MilestonesApi - factory interface
 * @export
 */
const MilestonesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MilestonesApiFp)(configuration);
    return {
        /**
         * This method allows to create a milestone in selected project.
         * @summary Create a new milestone
         * @param {string} code Code of project, where to search entities.
         * @param {MilestoneCreate} milestoneCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMilestone(code, milestoneCreate, options) {
            return localVarFp.createMilestone(code, milestoneCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method completely deletes a milestone from repository.
         * @summary Delete milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone(code, id, options) {
            return localVarFp.deleteMilestone(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve a specific milestone.
         * @summary Get a specific milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestone(code, id, options) {
            return localVarFp.getMilestone(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to retrieve all milestones stored in selected project.
         * @summary Get all milestones
         * @param {string} code Code of project, where to search entities.
         * @param {string} [search] Provide a string that will be used to search by name.
         * @param {number} [limit] A number of entities in result set.
         * @param {number} [offset] How many entities should be skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMilestones(code, search, limit, offset, options) {
            return localVarFp.getMilestones(code, search, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This method updates a milestone.
         * @summary Update milestone
         * @param {string} code Code of project, where to search entities.
         * @param {number} id Identifier.
         * @param {MilestoneUpdate} milestoneUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestone(code, id, milestoneUpdate, options) {
            return localVarFp.updateMilestone(code, id, milestoneUpdate, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MilestonesApiFactory = MilestonesApiFactory;
/**
 * MilestonesApi - object-oriented interface
 * @export
 * @class MilestonesApi
 * @extends {BaseAPI}
 */
class MilestonesApi extends base_1.BaseAPI {
    /**
     * This method allows to create a milestone in selected project.
     * @summary Create a new milestone
     * @param {string} code Code of project, where to search entities.
     * @param {MilestoneCreate} milestoneCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    createMilestone(code, milestoneCreate, options) {
        return (0, exports.MilestonesApiFp)(this.configuration).createMilestone(code, milestoneCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method completely deletes a milestone from repository.
     * @summary Delete milestone
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    deleteMilestone(code, id, options) {
        return (0, exports.MilestonesApiFp)(this.configuration).deleteMilestone(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve a specific milestone.
     * @summary Get a specific milestone
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    getMilestone(code, id, options) {
        return (0, exports.MilestonesApiFp)(this.configuration).getMilestone(code, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to retrieve all milestones stored in selected project.
     * @summary Get all milestones
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    getMilestones(code, search, limit, offset, options) {
        return (0, exports.MilestonesApiFp)(this.configuration).getMilestones(code, search, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method updates a milestone.
     * @summary Update milestone
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {MilestoneUpdate} milestoneUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    updateMilestone(code, id, milestoneUpdate, options) {
        return (0, exports.MilestonesApiFp)(this.configuration).updateMilestone(code, id, milestoneUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MilestonesApi = MilestonesApi;
