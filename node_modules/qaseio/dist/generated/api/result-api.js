"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Qase.io TestOps API v2
 * Qase TestOps API v2 Specification.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultApi = exports.ResultApiFactory = exports.ResultApiFp = exports.ResultApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ResultApi - axios parameter creator
 * @export
 */
const ResultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary (Beta) Create test run result
         * @param {string} projectCode
         * @param {number} runId
         * @param {ResultCreate} resultCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultV2: (projectCode_1, runId_1, resultCreate_1, ...args_1) => __awaiter(this, [projectCode_1, runId_1, resultCreate_1, ...args_1], void 0, function* (projectCode, runId, resultCreate, options = {}) {
            // verify required parameter 'projectCode' is not null or undefined
            (0, common_1.assertParamExists)('createResultV2', 'projectCode', projectCode);
            // verify required parameter 'runId' is not null or undefined
            (0, common_1.assertParamExists)('createResultV2', 'runId', runId);
            // verify required parameter 'resultCreate' is not null or undefined
            (0, common_1.assertParamExists)('createResultV2', 'resultCreate', resultCreate);
            const localVarPath = `/v2/{project_code}/run/{run_id}/result`
                .replace(`{${"project_code"}}`, encodeURIComponent(String(projectCode)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resultCreate, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary (Beta) Bulk create test run result
         * @param {string} projectCode
         * @param {number} runId
         * @param {CreateResultsRequestV2} createResultsRequestV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultsV2: (projectCode_2, runId_2, createResultsRequestV2_1, ...args_2) => __awaiter(this, [projectCode_2, runId_2, createResultsRequestV2_1, ...args_2], void 0, function* (projectCode, runId, createResultsRequestV2, options = {}) {
            // verify required parameter 'projectCode' is not null or undefined
            (0, common_1.assertParamExists)('createResultsV2', 'projectCode', projectCode);
            // verify required parameter 'runId' is not null or undefined
            (0, common_1.assertParamExists)('createResultsV2', 'runId', runId);
            // verify required parameter 'createResultsRequestV2' is not null or undefined
            (0, common_1.assertParamExists)('createResultsV2', 'createResultsRequestV2', createResultsRequestV2);
            const localVarPath = `/v2/{project_code}/run/{run_id}/results`
                .replace(`{${"project_code"}}`, encodeURIComponent(String(projectCode)))
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication TokenAuth required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Token", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createResultsRequestV2, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ResultApiAxiosParamCreator = ResultApiAxiosParamCreator;
/**
 * ResultApi - functional programming interface
 * @export
 */
const ResultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ResultApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary (Beta) Create test run result
         * @param {string} projectCode
         * @param {number} runId
         * @param {ResultCreate} resultCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultV2(projectCode, runId, resultCreate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createResultV2(projectCode, runId, resultCreate, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary (Beta) Bulk create test run result
         * @param {string} projectCode
         * @param {number} runId
         * @param {CreateResultsRequestV2} createResultsRequestV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultsV2(projectCode, runId, createResultsRequestV2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createResultsV2(projectCode, runId, createResultsRequestV2, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ResultApiFp = ResultApiFp;
/**
 * ResultApi - factory interface
 * @export
 */
const ResultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ResultApiFp)(configuration);
    return {
        /**
         * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary (Beta) Create test run result
         * @param {string} projectCode
         * @param {number} runId
         * @param {ResultCreate} resultCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultV2(projectCode, runId, resultCreate, options) {
            return localVarFp.createResultV2(projectCode, runId, resultCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
         * @summary (Beta) Bulk create test run result
         * @param {string} projectCode
         * @param {number} runId
         * @param {CreateResultsRequestV2} createResultsRequestV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResultsV2(projectCode, runId, createResultsRequestV2, options) {
            return localVarFp.createResultsV2(projectCode, runId, createResultsRequestV2, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ResultApiFactory = ResultApiFactory;
/**
 * ResultApi - object-oriented interface
 * @export
 * @class ResultApi
 * @extends {BaseAPI}
 */
class ResultApi extends base_1.BaseAPI {
    /**
     * This method allows to create single test run result.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
     * @summary (Beta) Create test run result
     * @param {string} projectCode
     * @param {number} runId
     * @param {ResultCreate} resultCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    createResultV2(projectCode, runId, resultCreate, options) {
        return (0, exports.ResultApiFp)(this.configuration).createResultV2(projectCode, runId, resultCreate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This method allows to create several test run results at once.  If there is no free space left in your team account, when attempting to upload an attachment, e.g., through reporters, you will receive an error with code 507 - Insufficient Storage.
     * @summary (Beta) Bulk create test run result
     * @param {string} projectCode
     * @param {number} runId
     * @param {CreateResultsRequestV2} createResultsRequestV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    createResultsV2(projectCode, runId, createResultsRequestV2, options) {
        return (0, exports.ResultApiFp)(this.configuration).createResultsV2(projectCode, runId, createResultsRequestV2, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ResultApi = ResultApi;
