/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BaseResponse } from '../model';
import { CustomFieldCreate } from '../model';
import { CustomFieldListResponse } from '../model';
import { CustomFieldResponse } from '../model';
import { CustomFieldUpdate } from '../model';
import { IdResponse } from '../model';
/**
 * CustomFieldsApi - axios parameter creator
 * @export
 */
export declare const CustomFieldsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method allows to create custom field.
     * @summary Create new Custom Field
     * @param {CustomFieldCreate} customFieldCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomField: (customFieldCreate: CustomFieldCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to delete custom field.
     * @summary Delete Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomField: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve custom field.
     * @summary Get Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomField: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve and filter custom fields.
     * @summary Get all Custom Fields
     * @param {'case' | 'run' | 'defect'} [entity]
     * @param {'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFields: (entity?: 'case' | 'run' | 'defect', type?: 'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime', limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to update custom field.
     * @summary Update Custom Field by id
     * @param {number} id Identifier.
     * @param {CustomFieldUpdate} customFieldUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomField: (id: number, customFieldUpdate: CustomFieldUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomFieldsApi - functional programming interface
 * @export
 */
export declare const CustomFieldsApiFp: (configuration?: Configuration) => {
    /**
     * This method allows to create custom field.
     * @summary Create new Custom Field
     * @param {CustomFieldCreate} customFieldCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomField(customFieldCreate: CustomFieldCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to delete custom field.
     * @summary Delete Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomField(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * This method allows to retrieve custom field.
     * @summary Get Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomField(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldResponse>>;
    /**
     * This method allows to retrieve and filter custom fields.
     * @summary Get all Custom Fields
     * @param {'case' | 'run' | 'defect'} [entity]
     * @param {'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFields(entity?: 'case' | 'run' | 'defect', type?: 'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldListResponse>>;
    /**
     * This method allows to update custom field.
     * @summary Update Custom Field by id
     * @param {number} id Identifier.
     * @param {CustomFieldUpdate} customFieldUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomField(id: number, customFieldUpdate: CustomFieldUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
};
/**
 * CustomFieldsApi - factory interface
 * @export
 */
export declare const CustomFieldsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method allows to create custom field.
     * @summary Create new Custom Field
     * @param {CustomFieldCreate} customFieldCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomField(customFieldCreate: CustomFieldCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to delete custom field.
     * @summary Delete Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomField(id: number, options?: any): AxiosPromise<BaseResponse>;
    /**
     * This method allows to retrieve custom field.
     * @summary Get Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomField(id: number, options?: any): AxiosPromise<CustomFieldResponse>;
    /**
     * This method allows to retrieve and filter custom fields.
     * @summary Get all Custom Fields
     * @param {'case' | 'run' | 'defect'} [entity]
     * @param {'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFields(entity?: 'case' | 'run' | 'defect', type?: 'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime', limit?: number, offset?: number, options?: any): AxiosPromise<CustomFieldListResponse>;
    /**
     * This method allows to update custom field.
     * @summary Update Custom Field by id
     * @param {number} id Identifier.
     * @param {CustomFieldUpdate} customFieldUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomField(id: number, customFieldUpdate: CustomFieldUpdate, options?: any): AxiosPromise<BaseResponse>;
};
/**
 * CustomFieldsApi - object-oriented interface
 * @export
 * @class CustomFieldsApi
 * @extends {BaseAPI}
 */
export declare class CustomFieldsApi extends BaseAPI {
    /**
     * This method allows to create custom field.
     * @summary Create new Custom Field
     * @param {CustomFieldCreate} customFieldCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApi
     */
    createCustomField(customFieldCreate: CustomFieldCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to delete custom field.
     * @summary Delete Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApi
     */
    deleteCustomField(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BaseResponse, any>>;
    /**
     * This method allows to retrieve custom field.
     * @summary Get Custom Field by id
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApi
     */
    getCustomField(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomFieldResponse, any>>;
    /**
     * This method allows to retrieve and filter custom fields.
     * @summary Get all Custom Fields
     * @param {'case' | 'run' | 'defect'} [entity]
     * @param {'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime'} [type]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApi
     */
    getCustomFields(entity?: 'case' | 'run' | 'defect', type?: 'string' | 'text' | 'number' | 'checkbox' | 'selectbox' | 'radio' | 'multiselect' | 'url' | 'user' | 'datetime', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomFieldListResponse, any>>;
    /**
     * This method allows to update custom field.
     * @summary Update Custom Field by id
     * @param {number} id Identifier.
     * @param {CustomFieldUpdate} customFieldUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApi
     */
    updateCustomField(id: number, customFieldUpdate: CustomFieldUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BaseResponse, any>>;
}
