/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BaseResponse } from '../model';
import { Bulk200Response } from '../model';
import { IdResponse } from '../model';
import { TestCaseCreate } from '../model';
import { TestCaseListResponse } from '../model';
import { TestCaseResponse } from '../model';
import { TestCaseUpdate } from '../model';
import { TestCasebulk } from '../model';
import { TestCaseexternalIssues } from '../model';
/**
 * CasesApi - axios parameter creator
 * @export
 */
export declare const CasesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method allows to bulk create new test cases in a project.
     * @summary Create test cases in bulk
     * @param {string} code Code of project, where to search entities.
     * @param {TestCasebulk} testCasebulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulk: (code: string, testCasebulk: TestCasebulk, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Attach the external issues to the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseAttachExternalIssue: (code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Detach the external issues from the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDetachExternalIssue: (code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase: (code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCase: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [milestoneId] ID of milestone.
     * @param {number} [suiteId] ID of test suite.
     * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
     * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
     * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
     * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
     * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
     * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
     * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
     * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
     * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCases: (code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method updates a test case.
     * @summary Update test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase: (code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CasesApi - functional programming interface
 * @export
 */
export declare const CasesApiFp: (configuration?: Configuration) => {
    /**
     * This method allows to bulk create new test cases in a project.
     * @summary Create test cases in bulk
     * @param {string} code Code of project, where to search entities.
     * @param {TestCasebulk} testCasebulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulk(code: string, testCasebulk: TestCasebulk, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bulk200Response>>;
    /**
     *
     * @summary Attach the external issues to the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseAttachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Detach the external issues from the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDetachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCase(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseResponse>>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [milestoneId] ID of milestone.
     * @param {number} [suiteId] ID of test suite.
     * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
     * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
     * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
     * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
     * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
     * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
     * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
     * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
     * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCases(code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseListResponse>>;
    /**
     * This method updates a test case.
     * @summary Update test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
};
/**
 * CasesApi - factory interface
 * @export
 */
export declare const CasesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method allows to bulk create new test cases in a project.
     * @summary Create test cases in bulk
     * @param {string} code Code of project, where to search entities.
     * @param {TestCasebulk} testCasebulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulk(code: string, testCasebulk: TestCasebulk, options?: any): AxiosPromise<Bulk200Response>;
    /**
     *
     * @summary Attach the external issues to the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseAttachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Detach the external issues from the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDetachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: any): AxiosPromise<BaseResponse>;
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCase(code: string, testCaseCreate: TestCaseCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCase(code: string, id: number, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCase(code: string, id: number, options?: any): AxiosPromise<TestCaseResponse>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [milestoneId] ID of milestone.
     * @param {number} [suiteId] ID of test suite.
     * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
     * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
     * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
     * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
     * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
     * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
     * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
     * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
     * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCases(code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options?: any): AxiosPromise<TestCaseListResponse>;
    /**
     * This method updates a test case.
     * @summary Update test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: any): AxiosPromise<IdResponse>;
};
/**
 * CasesApi - object-oriented interface
 * @export
 * @class CasesApi
 * @extends {BaseAPI}
 */
export declare class CasesApi extends BaseAPI {
    /**
     * This method allows to bulk create new test cases in a project.
     * @summary Create test cases in bulk
     * @param {string} code Code of project, where to search entities.
     * @param {TestCasebulk} testCasebulk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    bulk(code: string, testCasebulk: TestCasebulk, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bulk200Response, any>>;
    /**
     *
     * @summary Attach the external issues to the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    caseAttachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BaseResponse, any>>;
    /**
     *
     * @summary Detach the external issues from the test cases
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseexternalIssues} testCaseexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    caseDetachExternalIssue(code: string, testCaseexternalIssues: TestCaseexternalIssues, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BaseResponse, any>>;
    /**
     * This method allows to create a new test case in selected project.
     * @summary Create a new test case
     * @param {string} code Code of project, where to search entities.
     * @param {TestCaseCreate} testCaseCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    createCase(code: string, testCaseCreate: TestCaseCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method completely deletes a test case from repository.
     * @summary Delete test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    deleteCase(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve a specific test case.
     * @summary Get a specific test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    getCase(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestCaseResponse, any>>;
    /**
     * This method allows to retrieve all test cases stored in selected project.
     * @summary Get all test cases
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search] Provide a string that will be used to search by name.
     * @param {number} [milestoneId] ID of milestone.
     * @param {number} [suiteId] ID of test suite.
     * @param {string} [severity] A list of severity values separated by comma. Possible values: undefined, blocker, critical, major, normal, minor, trivial
     * @param {string} [priority] A list of priority values separated by comma. Possible values: undefined, high, medium, low
     * @param {string} [type] A list of type values separated by comma. Possible values: other, functional smoke, regression, security, usability, performance, acceptance
     * @param {string} [behavior] A list of behavior values separated by comma. Possible values: undefined, positive negative, destructive
     * @param {string} [automation] A list of values separated by comma. Possible values: is-not-automated, automated to-be-automated
     * @param {string} [status] A list of values separated by comma. Possible values: actual, draft deprecated
     * @param {'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app'} [externalIssuesType] An integration type.
     * @param {Array<string>} [externalIssuesIds] A list of issue IDs.
     * @param {string} [include] A list of entities to include in response separated by comma. Possible values: external_issues.
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    getCases(code: string, search?: string, milestoneId?: number, suiteId?: number, severity?: string, priority?: string, type?: string, behavior?: string, automation?: string, status?: string, externalIssuesType?: 'asana' | 'azure-devops' | 'clickup-app' | 'github-app' | 'gitlab-app' | 'jira-cloud' | 'jira-server' | 'linear' | 'monday' | 'redmine-app' | 'trello-app' | 'youtrack-app', externalIssuesIds?: Array<string>, include?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestCaseListResponse, any>>;
    /**
     * This method updates a test case.
     * @summary Update test case
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {TestCaseUpdate} testCaseUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CasesApi
     */
    updateCase(code: string, id: number, testCaseUpdate: TestCaseUpdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
}
