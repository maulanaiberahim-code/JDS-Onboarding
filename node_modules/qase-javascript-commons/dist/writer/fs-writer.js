"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsWriter = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const formatter_1 = require("../formatter");
const driver_enum_1 = require("./driver-enum");
/**
 * @class FsWriter
 * @implements WriterInterface
 */
class FsWriter {
    /**
     * @param {FsWriterOptionsType | undefined} options
     */
    constructor(options) {
        const { path: pathOptions = path.join('build', 'qase-report'), format = options?.format ?? driver_enum_1.FormatEnum.json, } = options ?? {};
        this.path = pathOptions;
        this.format = format;
        if (this.format === driver_enum_1.FormatEnum.json) {
            this.formatter = new formatter_1.JsonFormatter();
        }
        else {
            this.formatter = new formatter_1.JsonpFormatter();
        }
    }
    /**
     * @returns {void}
     */
    clearPreviousResults() {
        this.deleteFolderRecursive(this.path);
    }
    /**
     * @param {Attachment[]} attachments
     * @returns {Attachment[]}
     */
    writeAttachment(attachments) {
        const attachmentsPath = path.join(this.path, 'attachments');
        try {
            (0, fs_1.mkdirSync)(attachmentsPath, { recursive: true });
        }
        catch (error) { /* ignore */
        }
        for (const attachment of attachments) {
            if (attachment.file_path) {
                attachment.file_name = path.basename(attachment.file_path);
            }
            const filePath = path.join(attachmentsPath, `${attachment.id}-${attachment.file_name}`);
            if (attachment.file_path) {
                (0, fs_1.copyFileSync)(attachment.file_path, filePath);
                attachment.file_path = filePath;
                continue;
            }
            (0, fs_1.writeFileSync)(filePath, attachment.content);
            attachment.file_path = filePath;
        }
        return attachments;
    }
    /**
     * @param {TestResultType[]} results
     * @returns {Promise<string>}
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async writeReport(results) {
        try {
            (0, fs_1.mkdirSync)(this.path, { recursive: true });
        }
        catch (error) { /* ignore */
        }
        const filePath = path.join(this.path, `report.${this.format}`);
        (0, fs_1.writeFileSync)(filePath, await this.formatter.format(results));
        return filePath;
    }
    /**
     * @returns {Promise<void>}
     * @param {TestResultType} result
     */
    async writeTestResult(result) {
        const resultsPath = path.join(this.path, 'results');
        try {
            (0, fs_1.mkdirSync)(resultsPath, { recursive: true });
        }
        catch (error) { /* ignore */
        }
        const filePath = path.join(resultsPath, `${result.id}.${this.format}`);
        (0, fs_1.writeFileSync)(filePath, await this.formatter.format(result));
    }
    deleteFolderRecursive(directoryPath) {
        if ((0, fs_1.existsSync)(directoryPath)) {
            (0, fs_1.readdirSync)(directoryPath).forEach((file) => {
                const curPath = path.join(directoryPath, file);
                if ((0, fs_1.lstatSync)(curPath).isDirectory()) { // recurse
                    this.deleteFolderRecursive(curPath);
                }
                else { // delete file
                    (0, fs_1.unlinkSync)(curPath);
                }
            });
            (0, fs_1.rmdirSync)(directoryPath);
        }
    }
}
exports.FsWriter = FsWriter;
