"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractReporter = void 0;
const uuid_1 = require("uuid");
/**
 * @abstract
 * @class AbstractReporter
 * @implements InternalReporterInterface
 */
class AbstractReporter {
    /**
     * @protected
     * @param {LoggerInterface} logger
     */
    constructor(logger) {
        /**
         * @type {TestResultType[]}
         * @protected
         */
        this.results = [];
        this.logger = logger;
    }
    /**
     * @returns {TestResultType[]}
     */
    getTestResults() {
        const results = this.results;
        this.results = [];
        return results;
    }
    /**
     * @param {TestResultType} result
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async addTestResult(result) {
        this.logger.logDebug(`Adding test result: ${JSON.stringify(result)}`);
        if (result.execution.stacktrace) {
            result.execution.stacktrace = this.removeAnsiEscapeCodes(result.execution.stacktrace);
        }
        if (result.message) {
            result.message = this.removeAnsiEscapeCodes(result.message);
        }
        if (result.testops_id === null || !Array.isArray(result.testops_id)) {
            this.results.push(result);
            return;
        }
        // if we have multiple ids, we need to create multiple test results and set duration to 0 for all but the first one
        let firstCase = true;
        for (const id of result.testops_id) {
            const testResultCopy = { ...result };
            testResultCopy.testops_id = id;
            testResultCopy.id = (0, uuid_1.v4)();
            if (!firstCase) {
                testResultCopy.execution.duration = 0;
            }
            firstCase = false;
            this.results.push(testResultCopy);
        }
    }
    /**
     * @param {TestResultType[]} results
     */
    setTestResults(results) {
        this.results = results;
    }
    removeAnsiEscapeCodes(str) {
        const ansiEscapeSequences = new RegExp([
            '\x1B[[(?);]{0,2}(;?\\d)*.',
        ].join('|'), 'g');
        return str.replace(ansiEscapeSequences, '');
    }
}
exports.AbstractReporter = AbstractReporter;
