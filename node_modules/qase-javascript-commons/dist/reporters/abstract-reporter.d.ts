import { TestResultType } from '../models';
import { LoggerInterface } from '../utils/logger';
export interface InternalReporterInterface {
    addTestResult(result: TestResultType): Promise<void>;
    publish(): Promise<void>;
    startTestRun(): Promise<void>;
    getTestResults(): TestResultType[];
    setTestResults(results: TestResultType[]): void;
    sendResults(): Promise<void>;
    complete(): Promise<void>;
}
/**
 * @abstract
 * @class AbstractReporter
 * @implements InternalReporterInterface
 */
export declare abstract class AbstractReporter implements InternalReporterInterface {
    /**
     * @type {LoggerInterface}
     * @private
     */
    protected readonly logger: LoggerInterface;
    /**
     * @type {TestResultType[]}
     * @protected
     */
    protected results: TestResultType[];
    /**
     * @returns {Promise<void>}
     */
    abstract publish(): Promise<void>;
    /**
     * @returns {Promise<void>}
     */
    abstract startTestRun(): Promise<void>;
    /**
     * @returns {Promise<void>}
     */
    abstract complete(): Promise<void>;
    /**
     * @returns {Promise<void>}
     */
    abstract sendResults(): Promise<void>;
    /**
     * @protected
     * @param {LoggerInterface} logger
     */
    protected constructor(logger: LoggerInterface);
    /**
     * @returns {TestResultType[]}
     */
    getTestResults(): TestResultType[];
    /**
     * @param {TestResultType} result
     */
    addTestResult(result: TestResultType): Promise<void>;
    /**
     * @param {TestResultType[]} results
     */
    setTestResults(results: TestResultType[]): void;
    private removeAnsiEscapeCodes;
}
